 import dbm
 import os
 import pickle
 import pkg_resources
 import re
 import shelve
 from .conf import settings
 from contextlib import closing
 from decorator import decorator
 from difflib import get_close_matches
 from functools import wraps
 from inspect import getargspec
 from pathlib import Path
 from warnings import warn
 
 DEVNULL = open(os.devnull, 'w')
 
 
 def memoize(fn):
     """Caches previous calls to the function."""
     memo = {}
 
     @wraps(fn)
     def wrapper(*args, **kwargs):
             # Memoize is disabled, call the function
 
 
     return wrapper
 memoize.disabled = False
 
 
 @memoize
 def which(program):
     """Returns `program` path or `None`."""
 
 
 
 
 
 def default_settings(params):
     """Adds default values to settings if it not presented.
 
     Usage:
 
         @default_settings({'apt': '/usr/bin/apt'})
         def match(command, settings):
             print(settings.apt)
 
     """
 
 
 def get_closest(word, possibilities, n=3, cutoff=0.6, fallback_to_first=True):
     """Returns closest match or just first from possibilities."""
 
 
 @memoize
 def get_all_executables():
 
 
 
 
 def replace_argument(script, from_, to):
     """Replaces command line argument."""
 
 
 @decorator
 def eager(fn, *args, **kwargs):
 
 
 @eager
 def get_all_matched_commands(stderr, separator='Did you mean'):
 
 
 def replace_command(command, broken, matched):
     """Helper for *_no_command rules."""
 
 
 @memoize
 def is_app(command, *app_names, **kwargs):
     """Returns `True` if command is call to one of passed app names."""
 
 
 
 
 
 def for_app(*app_names, **kwargs):
     """Specifies that matching script is for on of app names."""
 
 
 
 def cache(*depends_on):
     """Caches function result in temporary file.
 
     Cache will be expired when modification date of files from `depends_on`
     will be changed.
 
     Function wrapped in `cache` should be arguments agnostic.
 
     """
     def _get_mtime(name):
 
     def _get_cache_path():
 
         # Ensure the cache_path exists, Python 2 does not have the exist_ok
         # parameter
 
 
     @decorator
     def _cache(fn, *args, **kwargs):
 
         # A bit obscure, but simplest way to generate unique key for
         # functions and methods in python 2 and 3:
 
 
             # Caused when going from Python 2 to Python 3
 
 
     return _cache
 cache.disabled = False
 
 
 def compatibility_call(fn, *args):
     """Special call for compatibility with user-defined old-style rules
     with `settings` param.
 
     """
 
 
 def get_installation_info():

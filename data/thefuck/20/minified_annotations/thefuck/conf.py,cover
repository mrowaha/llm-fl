 from imp import load_source
 import os
 import sys
 from pathlib import Path
 from six import text_type
 
 
 ALL_ENABLED = object()
 DEFAULT_RULES = [ALL_ENABLED]
 DEFAULT_PRIORITY = 1000
 
 DEFAULT_SETTINGS = {'rules': DEFAULT_RULES,
                     'exclude_rules': [],
                     'wait_command': 3,
                     'require_confirmation': True,
                     'no_colors': False,
                     'debug': False,
                     'priority': {},
                     'history_limit': None,
                     'env': {'LC_ALL': 'C', 'LANG': 'C', 'GIT_TRACE': '1'}}
 
 ENV_TO_ATTR = {'THEFUCK_RULES': 'rules',
                'THEFUCK_EXCLUDE_RULES': 'exclude_rules',
                'THEFUCK_WAIT_COMMAND': 'wait_command',
                'THEFUCK_REQUIRE_CONFIRMATION': 'require_confirmation',
                'THEFUCK_NO_COLORS': 'no_colors',
                'THEFUCK_PRIORITY': 'priority',
                'THEFUCK_DEBUG': 'debug',
                'THEFUCK_HISTORY_LIMIT': 'history_limit'}
 
 SETTINGS_HEADER = u"""# The Fuck settings file
 #
 # The rules are defined as in the example bellow:
 #
 # rules = ['cd_parent', 'git_push', 'python_command', 'sudo']
 #
 # The default values are as follows. Uncomment and change to fit your needs.
 # See https://github.com/nvbn/thefuck#settings for more information.
 #
 
 """
 
 
 class Settings(dict):
     def __getattr__(self, item):
 
     def __setattr__(self, key, value):
         self[key] = value
 
     def init(self):
         """Fills `settings` with values from `settings.py` and env."""
 
 
 
 
     def _init_settings_file(self):
 
     def _get_user_dir_path(self):
         # for backward compatibility, use `~/.thefuck` if it exists
 
 
     def _setup_user_dir(self):
         """Returns user config dir, create it when it doesn't exist."""
 
 
     def _settings_from_file(self):
         """Loads settings from file."""
 
     def _rules_from_env(self, val):
         """Transforms rules list from env-string to python."""
 
     def _priority_from_env(self, val):
         """Gets priority pairs from env."""
 
     def _val_from_env(self, env, attr):
         """Transforms env-strings to python."""
 
     def _settings_from_env(self):
         """Loads settings from env."""
 
 
 settings = Settings(DEFAULT_SETTINGS)

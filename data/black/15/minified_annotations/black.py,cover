 import asyncio
 from asyncio.base_events import BaseEventLoop
 from concurrent.futures import Executor, ProcessPoolExecutor
 from datetime import datetime
 from enum import Enum, Flag
 from functools import lru_cache, partial, wraps
 import io
 import keyword
 import logging
 from multiprocessing import Manager
 import os
 from pathlib import Path
 import pickle
 import re
 import signal
 import sys
 import tokenize
 from typing import (
     Any,
     Callable,
     Collection,
     Dict,
     Generic,
     Iterable,
     Iterator,
     List,
     Optional,
     Pattern,
     Sequence,
     Set,
     Tuple,
     Type,
     TypeVar,
     Union,
     cast,
 )
 
 from appdirs import user_cache_dir
 from attr import dataclass, Factory
 import click
 import toml
 
 # lib2to3 fork
 from blib2to3.pytree import Node, Leaf, type_repr
 from blib2to3 import pygram, pytree
 from blib2to3.pgen2 import driver, token
 from blib2to3.pgen2.parse import ParseError
 
 
 __version__ = "18.6b2"
 DEFAULT_LINE_LENGTH = 88
 DEFAULT_EXCLUDES = (
     r"/(\.git|\.hg|\.mypy_cache|\.tox|\.venv|_build|buck-out|build|dist)/"
 )
 DEFAULT_INCLUDES = r"\.pyi?$"
 CACHE_DIR = Path(user_cache_dir("black", version=__version__))
 
 
 # types
 FileContent = str
 Encoding = str
 NewLine = str
 Depth = int
 NodeType = int
 LeafID = int
 Priority = int
 Index = int
 LN = Union[Leaf, Node]
 SplitFunc = Callable[["Line", bool], Iterator["Line"]]
 Timestamp = float
 FileSize = int
 CacheInfo = Tuple[Timestamp, FileSize]
 Cache = Dict[Path, CacheInfo]
 out = partial(click.secho, bold=True, err=True)
 err = partial(click.secho, fg="red", err=True)
 
 pygram.initialize(CACHE_DIR)
 syms = pygram.python_symbols
 
 
 class NothingChanged(UserWarning):
     """Raised by :func:`format_file` when reformatted code is the same as source."""
 
 
 class CannotSplit(Exception):
     """A readable split that fits the allotted line length is impossible.
 
     Raised by :func:`left_hand_split`, :func:`right_hand_split`, and
     :func:`delimiter_split`.
     """
 
 
 class FormatError(Exception):
     """Base exception for `# fmt: on` and `# fmt: off` handling.
 
     It holds the number of bytes of the prefix consumed before the format
     control comment appeared.
     """
 
     def __init__(self, consumed: int) -> None:
         super().__init__(consumed)
         self.consumed = consumed
 
     def trim_prefix(self, leaf: Leaf) -> None:
         leaf.prefix = leaf.prefix[self.consumed :]
 
     def leaf_from_consumed(self, leaf: Leaf) -> Leaf:
         """Returns a new Leaf from the consumed part of the prefix."""
 
 
 class FormatOn(FormatError):
     """Found a comment like `# fmt: on` in the file."""
 
 
 class FormatOff(FormatError):
     """Found a comment like `# fmt: off` in the file."""
 
 
 class WriteBack(Enum):
     NO = 0
     YES = 1
     DIFF = 2
 
     @classmethod
     def from_configuration(cls, *, check: bool, diff: bool) -> "WriteBack":
 
 
 
 class Changed(Enum):
     NO = 0
     CACHED = 1
     YES = 2
 
 
 class FileMode(Flag):
     AUTO_DETECT = 0
     PYTHON36 = 1
     PYI = 2
     NO_STRING_NORMALIZATION = 4
 
     @classmethod
     def from_configuration(
         cls, *, py36: bool, pyi: bool, skip_string_normalization: bool
     ) -> "FileMode":
 
 
 def read_pyproject_toml(
     ctx: click.Context, param: click.Parameter, value: Union[str, int, bool, None]
 ) -> Optional[str]:
     """Inject Black configuration from "pyproject.toml" into defaults in `ctx`.
 
     Returns the path to a successfully found and read configuration file, None
     otherwise.
     """
 
 
 
 
 
 @click.command(context_settings=dict(help_option_names=["-h", "--help"]))
 @click.option(
     "-l",
     "--line-length",
     type=int,
     default=DEFAULT_LINE_LENGTH,
     help="How many character per line to allow.",
     show_default=True,
 )
 @click.option(
     "--py36",
     is_flag=True,
     help=(
         "Allow using Python 3.6-only syntax on all input files.  This will put "
         "trailing commas in function signatures and calls also after *args and "
         "**kwargs.  [default: per-file auto-detection]"
     ),
 )
 @click.option(
     "--pyi",
     is_flag=True,
     help=(
         "Format all input files like typing stubs regardless of file extension "
         "(useful when piping source on standard input)."
     ),
 )
 @click.option(
     "-S",
     "--skip-string-normalization",
     is_flag=True,
     help="Don't normalize string quotes or prefixes.",
 )
 @click.option(
     "--check",
     is_flag=True,
     help=(
         "Don't write the files back, just return the status.  Return code 0 "
         "means nothing would change.  Return code 1 means some files would be "
         "reformatted.  Return code 123 means there was an internal error."
     ),
 )
 @click.option(
     "--diff",
     is_flag=True,
     help="Don't write the files back, just output a diff for each file on stdout.",
 )
 @click.option(
     "--fast/--safe",
     is_flag=True,
     help="If --fast given, skip temporary sanity checks. [default: --safe]",
 )
 @click.option(
     "--include",
     type=str,
     default=DEFAULT_INCLUDES,
     help=(
         "A regular expression that matches files and directories that should be "
         "included on recursive searches.  An empty value means all files are "
         "included regardless of the name.  Use forward slashes for directories on "
         "all platforms (Windows, too).  Exclusions are calculated first, inclusions "
         "later."
     ),
     show_default=True,
 )
 @click.option(
     "--exclude",
     type=str,
     default=DEFAULT_EXCLUDES,
     help=(
         "A regular expression that matches files and directories that should be "
         "excluded on recursive searches.  An empty value means no paths are excluded. "
         "Use forward slashes for directories on all platforms (Windows, too).  "
         "Exclusions are calculated first, inclusions later."
     ),
     show_default=True,
 )
 @click.option(
     "-q",
     "--quiet",
     is_flag=True,
     help=(
         "Don't emit non-error messages to stderr. Errors are still emitted, "
         "silence those with 2>/dev/null."
     ),
 )
 @click.option(
     "-v",
     "--verbose",
     is_flag=True,
     help=(
         "Also emit messages to stderr about files that were not changed or were "
         "ignored due to --exclude=."
     ),
 )
 @click.version_option(version=__version__)
 @click.argument(
     "src",
     nargs=-1,
     type=click.Path(
         exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True
     ),
     is_eager=True,
 )
 @click.option(
     "--config",
     type=click.Path(
         exists=False, file_okay=True, dir_okay=False, readable=True, allow_dash=False
     ),
     is_eager=True,
     callback=read_pyproject_toml,
     help="Read configuration from PATH.",
 )
 @click.pass_context
 def main(
     ctx: click.Context,
     line_length: int,
     check: bool,
     diff: bool,
     fast: bool,
     pyi: bool,
     py36: bool,
     skip_string_normalization: bool,
     quiet: bool,
     verbose: bool,
     include: str,
     exclude: str,
     src: Tuple[str],
     config: Optional[str],
 ) -> None:
     """The uncompromising code formatter."""
             # if a file was explicitly given, we don't care about its extension
 
 
 
 def reformat_one(
     src: Path,
     line_length: int,
     fast: bool,
     write_back: WriteBack,
     mode: FileMode,
     report: "Report",
 ) -> None:
     """Reformat a single file under `src` without spawning child processes.
 
     If `quiet` is True, non-error messages are not output. `line_length`,
     `write_back`, `fast` and `pyi` options are passed to
     :func:`format_file_in_place` or :func:`format_stdin_to_stdout`.
     """
 
 
 async def schedule_formatting(
     sources: Set[Path],
     line_length: int,
     fast: bool,
     write_back: WriteBack,
     mode: FileMode,
     report: "Report",
     loop: BaseEventLoop,
     executor: Executor,
 ) -> None:
     """Run formatting of `sources` in parallel using the provided `executor`.
 
     (Use ProcessPoolExecutors for actual parallelism.)
 
     `line_length`, `write_back`, `fast`, and `pyi` options are passed to
     :func:`format_file_in_place`.
     """
             # For diff output, we need locks to ensure we don't interleave output
             # from different processes.
             # There are no good alternatives for these on Windows
 
 
 def format_file_in_place(
     src: Path,
     line_length: int,
     fast: bool,
     write_back: WriteBack = WriteBack.NO,
     mode: FileMode = FileMode.AUTO_DETECT,
     lock: Any = None,  # multiprocessing.Manager().Lock() is some crazy proxy
 ) -> bool:
     """Format file under `src` path. Return True if changed.
 
     If `write_back` is True, write reformatted code back to stdout.
     `line_length` and `fast` options are passed to :func:`format_file_contents`.
     """
 
 
 
 
 def format_stdin_to_stdout(
     line_length: int,
     fast: bool,
     write_back: WriteBack = WriteBack.NO,
     mode: FileMode = FileMode.AUTO_DETECT,
 ) -> bool:
     """Format file on stdin. Return True if changed.
 
     If `write_back` is True, write reformatted code back to stdout.
     `line_length`, `fast`, `is_pyi`, and `force_py36` arguments are passed to
     :func:`format_file_contents`.
     """
 
 
 
 
 def format_file_contents(
     src_contents: str,
     *,
     line_length: int,
     fast: bool,
     mode: FileMode = FileMode.AUTO_DETECT,
 ) -> FileContent:
     """Reformat contents a file and return new contents.
 
     If `fast` is False, additionally confirm that the reformatted code is
     valid by calling :func:`assert_equivalent` and :func:`assert_stable` on it.
     `line_length` is passed to :func:`format_str`.
     """
 
 
 
 
 def format_str(
     src_contents: str, line_length: int, *, mode: FileMode = FileMode.AUTO_DETECT
 ) -> FileContent:
     """Reformat a string and return new contents.
 
     `line_length` determines how many characters per line are allowed.
     """
     src_node = lib2to3_parse(src_contents)
     dst_contents = ""
     future_imports = get_future_imports(src_node)
     is_pyi = bool(mode & FileMode.PYI)
     py36 = bool(mode & FileMode.PYTHON36) or is_python36(src_node)
     normalize_strings = not bool(mode & FileMode.NO_STRING_NORMALIZATION)
     normalize_fmt_off(src_node)
     lines = LineGenerator(
         remove_u_prefix=py36 or "unicode_literals" in future_imports,
         is_pyi=is_pyi,
         normalize_strings=normalize_strings,
     )
     elt = EmptyLineTracker(is_pyi=is_pyi)
     empty_line = Line()
     after = 0
     for current_line in lines.visit(src_node):
         for _ in range(after):
         before, after = elt.maybe_empty_lines(current_line)
         for _ in range(before):
             dst_contents += str(empty_line)
         for line in split_line(current_line, line_length=line_length, py36=py36):
             dst_contents += str(line)
     return dst_contents
 
 
 def decode_bytes(src: bytes) -> Tuple[FileContent, Encoding, NewLine]:
     """Return a tuple of (decoded_contents, encoding, newline).
 
     `newline` is either CRLF or LF but `decoded_contents` is decoded with
     universal newlines (i.e. only contains LF).
     """
 
 
 
 GRAMMARS = [
     pygram.python_grammar_no_print_statement_no_exec_statement,
     pygram.python_grammar_no_print_statement,
     pygram.python_grammar,
 ]
 
 
 def lib2to3_parse(src_txt: str) -> Node:
     """Given a string with source, return the lib2to3 Node."""
     grammar = pygram.python_grammar_no_print_statement
     if src_txt[-1:] != "\n":
     for grammar in GRAMMARS:
         drv = driver.Driver(grammar, pytree.convert)
         try:
             result = drv.parse_string(src_txt, True)
             break
 
 
     if isinstance(result, Leaf):
     return result
 
 
 def lib2to3_unparse(node: Node) -> str:
     """Given a lib2to3 node, return its string representation."""
 
 
 T = TypeVar("T")
 
 
 class Visitor(Generic[T]):
     """Basic lib2to3 visitor that yields things of type `T` on `visit()`."""
 
     def visit(self, node: LN) -> Iterator[T]:
         """Main method to visit `node` and its children.
 
         It tries to find a `visit_*()` method for the given `node.type`, like
         `visit_simple_stmt` for Node objects or `visit_INDENT` for Leaf objects.
         If no dedicated `visit_*()` method is found, chooses `visit_default()`
         instead.
 
         Then yields objects of type `T` from the selected visitor.
         """
         if node.type < 256:
             name = token.tok_name[node.type]
         else:
             name = type_repr(node.type)
         yield from getattr(self, f"visit_{name}", self.visit_default)(node)
 
     def visit_default(self, node: LN) -> Iterator[T]:
         """Default `visit_*()` implementation. Recurses to children of `node`."""
         if isinstance(node, Node):
             for child in node.children:
                 yield from self.visit(child)
 
 
 @dataclass
 class DebugVisitor(Visitor[T]):
     tree_depth: int = 0
 
     def visit_default(self, node: LN) -> Iterator[T]:
         indent = " " * (2 * self.tree_depth)
         if isinstance(node, Node):
             _type = type_repr(node.type)
             out(f"{indent}{_type}", fg="yellow")
             self.tree_depth += 1
             for child in node.children:
                 yield from self.visit(child)
 
             self.tree_depth -= 1
             out(f"{indent}/{_type}", fg="yellow", bold=False)
         else:
             _type = token.tok_name.get(node.type, str(node.type))
             out(f"{indent}{_type}", fg="blue", nl=False)
             if node.prefix:
                 # We don't have to handle prefixes for `Node` objects since
                 # that delegates to the first child anyway.
                 out(f" {node.prefix!r}", fg="green", bold=False, nl=False)
             out(f" {node.value!r}", fg="blue", bold=False)
 
     @classmethod
     def show(cls, code: str) -> None:
         """Pretty-print the lib2to3 AST of a given string of `code`.
 
         Convenience method for debugging.
         """
 
 
 KEYWORDS = set(keyword.kwlist)
 WHITESPACE = {token.DEDENT, token.INDENT, token.NEWLINE}
 FLOW_CONTROL = {"return", "raise", "break", "continue"}
 STATEMENT = {
     syms.if_stmt,
     syms.while_stmt,
     syms.for_stmt,
     syms.try_stmt,
     syms.except_clause,
     syms.with_stmt,
     syms.funcdef,
     syms.classdef,
 }
 STANDALONE_COMMENT = 153
 token.tok_name[STANDALONE_COMMENT] = "STANDALONE_COMMENT"
 LOGIC_OPERATORS = {"and", "or"}
 COMPARATORS = {
     token.LESS,
     token.GREATER,
     token.EQEQUAL,
     token.NOTEQUAL,
     token.LESSEQUAL,
     token.GREATEREQUAL,
 }
 MATH_OPERATORS = {
     token.VBAR,
     token.CIRCUMFLEX,
     token.AMPER,
     token.LEFTSHIFT,
     token.RIGHTSHIFT,
     token.PLUS,
     token.MINUS,
     token.STAR,
     token.SLASH,
     token.DOUBLESLASH,
     token.PERCENT,
     token.AT,
     token.TILDE,
     token.DOUBLESTAR,
 }
 STARS = {token.STAR, token.DOUBLESTAR}
 VARARGS_PARENTS = {
     syms.arglist,
     syms.argument,  # double star in arglist
     syms.trailer,  # single argument to call
     syms.typedargslist,
     syms.varargslist,  # lambdas
 }
 UNPACKING_PARENTS = {
     syms.atom,  # single element of a list or set literal
     syms.dictsetmaker,
     syms.listmaker,
     syms.testlist_gexp,
     syms.testlist_star_expr,
 }
 SURROUNDED_BY_BRACKETS = {
     syms.typedargslist,
     syms.arglist,
     syms.subscriptlist,
     syms.vfplist,
     syms.import_as_names,
     syms.yield_expr,
     syms.testlist_gexp,
     syms.testlist_star_expr,
     syms.listmaker,
     syms.dictsetmaker,
 }
 TEST_DESCENDANTS = {
     syms.test,
     syms.lambdef,
     syms.or_test,
     syms.and_test,
     syms.not_test,
     syms.comparison,
     syms.star_expr,
     syms.expr,
     syms.xor_expr,
     syms.and_expr,
     syms.shift_expr,
     syms.arith_expr,
     syms.trailer,
     syms.term,
     syms.power,
 }
 ASSIGNMENTS = {
     "=",
     "+=",
     "-=",
     "*=",
     "@=",
     "/=",
     "%=",
     "&=",
     "|=",
     "^=",
     "<<=",
     ">>=",
     "**=",
     "//=",
 }
 COMPREHENSION_PRIORITY = 20
 COMMA_PRIORITY = 18
 TERNARY_PRIORITY = 16
 LOGIC_PRIORITY = 14
 STRING_PRIORITY = 12
 COMPARATOR_PRIORITY = 10
 MATH_PRIORITIES = {
     token.VBAR: 9,
     token.CIRCUMFLEX: 8,
     token.AMPER: 7,
     token.LEFTSHIFT: 6,
     token.RIGHTSHIFT: 6,
     token.PLUS: 5,
     token.MINUS: 5,
     token.STAR: 4,
     token.SLASH: 4,
     token.DOUBLESLASH: 4,
     token.PERCENT: 4,
     token.AT: 4,
     token.TILDE: 3,
     token.DOUBLESTAR: 2,
 }
 DOT_PRIORITY = 1
 
 
 @dataclass
 class BracketTracker:
     """Keeps track of brackets on a line."""
 
     depth: int = 0
     bracket_match: Dict[Tuple[Depth, NodeType], Leaf] = Factory(dict)
     delimiters: Dict[LeafID, Priority] = Factory(dict)
     previous: Optional[Leaf] = None
     _for_loop_variable: int = 0
     _lambda_arguments: int = 0
 
     def mark(self, leaf: Leaf) -> None:
         """Mark `leaf` with bracket-related metadata. Keep track of delimiters.
 
         All leaves receive an int `bracket_depth` field that stores how deep
         within brackets a given leaf is. 0 means there are no enclosing brackets
         that started on this line.
 
         If a leaf is itself a closing bracket, it receives an `opening_bracket`
         field that it forms a pair with. This is a one-directional link to
         avoid reference cycles.
 
         If a leaf is a delimiter (a token on which Black can split the line if
         needed) and it's on depth 0, its `id()` is stored in the tracker's
         `delimiters` field.
         """
         if leaf.type == token.COMMENT:
 
         self.maybe_decrement_after_for_loop_variable(leaf)
         self.maybe_decrement_after_lambda_arguments(leaf)
         if leaf.type in CLOSING_BRACKETS:
             self.depth -= 1
             opening_bracket = self.bracket_match.pop((self.depth, leaf.type))
             leaf.opening_bracket = opening_bracket
         leaf.bracket_depth = self.depth
         if self.depth == 0:
             delim = is_split_before_delimiter(leaf, self.previous)
             if delim and self.previous is not None:
                 self.delimiters[id(self.previous)] = delim
             else:
                 delim = is_split_after_delimiter(leaf, self.previous)
                 if delim:
         if leaf.type in OPENING_BRACKETS:
             self.bracket_match[self.depth, BRACKET[leaf.type]] = leaf
             self.depth += 1
         self.previous = leaf
         self.maybe_increment_lambda_arguments(leaf)
         self.maybe_increment_for_loop_variable(leaf)
 
     def any_open_brackets(self) -> bool:
         """Return True if there is an yet unmatched open bracket on the line."""
         return bool(self.bracket_match)
 
     def max_delimiter_priority(self, exclude: Iterable[LeafID] = ()) -> int:
         """Return the highest priority of a delimiter found on the line.
 
         Values are consistent with what `is_split_*_delimiter()` return.
         Raises ValueError on no delimiters.
         """
 
     def delimiter_count_with_priority(self, priority: int = 0) -> int:
         """Return the number of delimiters with the given `priority`.
 
         If no `priority` is passed, defaults to max priority on the line.
         """
 
 
     def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:
         """In a for loop, or comprehension, the variables are often unpacks.
 
         To avoid splitting on the comma in this situation, increase the depth of
         tokens between `for` and `in`.
         """
         if leaf.type == token.NAME and leaf.value == "for":
 
         return False
 
     def maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool:
         """See `maybe_increment_for_loop_variable` above for explanation."""
         if self._for_loop_variable and leaf.type == token.NAME and leaf.value == "in":
 
         return False
 
     def maybe_increment_lambda_arguments(self, leaf: Leaf) -> bool:
         """In a lambda expression, there might be more than one argument.
 
         To avoid splitting on the comma in this situation, increase the depth of
         tokens between `lambda` and `:`.
         """
         if leaf.type == token.NAME and leaf.value == "lambda":
 
         return False
 
     def maybe_decrement_after_lambda_arguments(self, leaf: Leaf) -> bool:
         """See `maybe_increment_lambda_arguments` above for explanation."""
         if self._lambda_arguments and leaf.type == token.COLON:
 
         return False
 
     def get_open_lsqb(self) -> Optional[Leaf]:
         """Return the most recent opening square bracket (if any)."""
         return self.bracket_match.get((self.depth - 1, token.RSQB))
 
 
 @dataclass
 class Line:
     """Holds leaves and comments. Can be printed with `str(line)`."""
 
     depth: int = 0
     leaves: List[Leaf] = Factory(list)
     comments: List[Tuple[Index, Leaf]] = Factory(list)
     bracket_tracker: BracketTracker = Factory(BracketTracker)
     inside_brackets: bool = False
     should_explode: bool = False
 
     def append(self, leaf: Leaf, preformatted: bool = False) -> None:
         """Add a new `leaf` to the end of the line.
 
         Unless `preformatted` is True, the `leaf` will receive a new consistent
         whitespace prefix and metadata applied by :class:`BracketTracker`.
         Trailing commas are maybe removed, unpacked for loop variables are
         demoted from being delimiters.
 
         Inline comments are put aside.
         """
         has_value = leaf.type in BRACKETS or bool(leaf.value.strip())
         if not has_value:
             return
 
         if token.COLON == leaf.type and self.is_class_paren_empty:
         if self.leaves and not preformatted:
             # Note: at this point leaf.prefix should be empty except for
             # imports, for which we only preserve newlines.
             leaf.prefix += whitespace(
                 leaf, complex_subscript=self.is_complex_subscript(leaf)
             )
         if self.inside_brackets or not preformatted:
             self.bracket_tracker.mark(leaf)
             self.maybe_remove_trailing_comma(leaf)
         if not self.append_comment(leaf):
             self.leaves.append(leaf)
 
     def append_safe(self, leaf: Leaf, preformatted: bool = False) -> None:
         """Like :func:`append()` but disallow invalid standalone comment structure.
 
         Raises ValueError when any `leaf` is appended after a standalone comment
         or when a standalone comment is not the first leaf on the line.
         """
 
 
 
     @property
     def is_comment(self) -> bool:
         """Is this line a standalone comment?"""
         return len(self.leaves) == 1 and self.leaves[0].type == STANDALONE_COMMENT
 
     @property
     def is_decorator(self) -> bool:
         """Is this line a decorator?"""
         return bool(self) and self.leaves[0].type == token.AT
 
     @property
     def is_import(self) -> bool:
         """Is this an import line?"""
         return bool(self) and is_import(self.leaves[0])
 
     @property
     def is_class(self) -> bool:
         """Is this line a class definition?"""
         return (
             bool(self)
             and self.leaves[0].type == token.NAME
             and self.leaves[0].value == "class"
         )
 
     @property
     def is_stub_class(self) -> bool:
         """Is this line a class definition with a body consisting only of "..."?"""
 
     @property
     def is_def(self) -> bool:
         """Is this a function definition? (Also returns True for async defs.)"""
         try:
             first_leaf = self.leaves[0]
 
         try:
             second_leaf: Optional[Leaf] = self.leaves[1]
         except IndexError:
             second_leaf = None
         return (first_leaf.type == token.NAME and first_leaf.value == "def") or (
             first_leaf.type == token.ASYNC
             and second_leaf is not None
             and second_leaf.type == token.NAME
             and second_leaf.value == "def"
         )
 
     @property
     def is_class_paren_empty(self) -> bool:
         """Is this a class with no base classes but using parentheses?
 
         Those are unnecessary and should be removed.
         """
         return (
             bool(self)
             and len(self.leaves) == 4
             and self.is_class
             and self.leaves[2].type == token.LPAR
             and self.leaves[2].value == "("
             and self.leaves[3].type == token.RPAR
             and self.leaves[3].value == ")"
         )
 
     @property
     def is_triple_quoted_string(self) -> bool:
         """Is the line a triple quoted string?"""
 
     def contains_standalone_comments(self, depth_limit: int = sys.maxsize) -> bool:
         """If so, needs to be split before emitting."""
         for leaf in self.leaves:
             if leaf.type == STANDALONE_COMMENT:
 
         return False
 
     def contains_multiline_strings(self) -> bool:
 
 
     def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:
         """Remove trailing comma if there is one and it's safe."""
         if not (
             self.leaves
             and self.leaves[-1].type == token.COMMA
             and closing.type in CLOSING_BRACKETS
         ):
             return False
 
 
 
         # For parens let's check if it's safe to remove the comma.
         # Imports are always safe.
 
         # Otheriwsse, if the trailing one is the only one, we might mistakenly
         # change a tuple into a different type by removing the comma.
 
 
 
 
 
 
     def append_comment(self, comment: Leaf) -> bool:
         """Add an inline or standalone comment to the line."""
         if (
             comment.type == STANDALONE_COMMENT
             and self.bracket_tracker.any_open_brackets()
         ):
 
         if comment.type != token.COMMENT:
             return False
 
 
 
     def comments_after(self, leaf: Leaf, _index: int = -1) -> Iterator[Leaf]:
         """Generate comments that should appear directly after `leaf`.
 
         Provide a non-negative leaf `_index` to speed up the function.
         """
 
 
 
 
     def remove_trailing_comma(self) -> None:
         """Remove the trailing comma and moves the comments attached to it."""
 
     def is_complex_subscript(self, leaf: Leaf) -> bool:
         """Return True iff `leaf` is part of a slice with non-trivial exprs."""
         open_lsqb = self.bracket_tracker.get_open_lsqb()
         if open_lsqb is None:
             return False
 
 
 
 
     def __str__(self) -> str:
         """Render the line."""
         if not self:
             return "\n"
 
         indent = "    " * self.depth
         leaves = iter(self.leaves)
         first = next(leaves)
         res = f"{first.prefix}{indent}{first.value}"
         for leaf in leaves:
             res += str(leaf)
         for _, comment in self.comments:
         return res + "\n"
 
     def __bool__(self) -> bool:
         """Return True if the line has leaves or comments."""
         return bool(self.leaves or self.comments)
 
 
 class UnformattedLines(Line):
     """Just like :class:`Line` but stores lines which aren't reformatted."""
 
     def append(self, leaf: Leaf, preformatted: bool = True) -> None:
         """Just add a new `leaf` to the end of the lines.
 
         The `preformatted` argument is ignored.
 
         Keeps track of indentation `depth`, which is useful when the user
         says `# fmt: on`. Otherwise, doesn't do anything with the `leaf`.
         """
         try:
             list(generate_comments(leaf))
 
         self.leaves.append(leaf)
         if leaf.type == token.INDENT:
         elif leaf.type == token.DEDENT:
 
     def __str__(self) -> str:
         """Render unformatted lines from leaves which were added with `append()`.
 
         `depth` is not used for indentation in this case.
         """
         if not self:
 
         res = ""
         for leaf in self.leaves:
             res += str(leaf)
         return res
 
     def append_comment(self, comment: Leaf) -> bool:
         """Not implemented in this class. Raises `NotImplementedError`."""
 
     def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:
         """Does nothing and returns False."""
 
     def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:
         """Does nothing and returns False."""
 
 
 @dataclass
 class EmptyLineTracker:
     """Provides a stateful method that returns the number of potential extra
     empty lines needed before and after the currently processed line.
 
     Note: this tracker works on lines that haven't been split yet.  It assumes
     the prefix of the first leaf consists of optional newlines.  Those newlines
     are consumed by `maybe_empty_lines()` and included in the computation.
     """
 
     is_pyi: bool = False
     previous_line: Optional[Line] = None
     previous_after: int = 0
     previous_defs: List[int] = Factory(list)
 
     def maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:
         """Return the number of extra empty lines before and after the `current_line`.
 
         This is for separating `def`, `async def` and `class` with extra empty
         lines (two on module-level).
         """
         if isinstance(current_line, UnformattedLines):
             return 0, 0
 
         before, after = self._maybe_empty_lines(current_line)
         before -= self.previous_after
         self.previous_after = after
         self.previous_line = current_line
         return before, after
 
     def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:
         max_allowed = 1
         if current_line.depth == 0:
             max_allowed = 1 if self.is_pyi else 2
         if current_line.leaves:
             # Consume the first leaf's extra newlines.
             first_leaf = current_line.leaves[0]
             before = first_leaf.prefix.count("\n")
             before = min(before, max_allowed)
             first_leaf.prefix = ""
         depth = current_line.depth
         while self.previous_defs and self.previous_defs[-1] >= depth:
             self.previous_defs.pop()
             if self.is_pyi:
             else:
                 before = 1 if depth else 2
         if current_line.is_decorator or current_line.is_def or current_line.is_class:
             return self._maybe_empty_lines_for_class_or_def(current_line, before)
 
         if (
             self.previous_line
             and self.previous_line.is_import
             and not current_line.is_import
             and depth == self.previous_line.depth
         ):
             return (before or 1), 0
 
         if (
             self.previous_line
             and self.previous_line.is_class
             and current_line.is_triple_quoted_string
         ):
 
         return before, 0
 
     def _maybe_empty_lines_for_class_or_def(
         self, current_line: Line, before: int
     ) -> Tuple[int, int]:
         if not current_line.is_decorator:
             self.previous_defs.append(current_line.depth)
         if self.previous_line is None:
             # Don't insert empty lines before the first line in the file.
 
         if self.previous_line.is_decorator:
 
         if self.previous_line.depth < current_line.depth and (
             self.previous_line.is_class or self.previous_line.is_def
         ):
 
         if (
             self.previous_line.is_comment
             and self.previous_line.depth == current_line.depth
             and before == 0
         ):
             return 0, 0
 
                     # No blank line between classes with an emty body
                 # Blank line between a block of functions and a block of non-functions
 
 
 @dataclass
 class LineGenerator(Visitor[Line]):
     """Generates reformatted Line objects.  Empty lines are not emitted.
 
     Note: destroys the tree it's visiting by mutating prefixes of its leaves
     in ways that will no longer stringify to valid Python code on the tree.
     """
 
     is_pyi: bool = False
     normalize_strings: bool = True
     current_line: Line = Factory(Line)
     remove_u_prefix: bool = False
 
     def line(self, indent: int = 0, type: Type[Line] = Line) -> Iterator[Line]:
         """Generate a line.
 
         If the line is empty, only emit if it makes sense.
         If the line is too long, split it first and then generate.
 
         If any lines were generated, set up a new current_line.
         """
         if not self.current_line:
             if self.current_line.__class__ == type:
                 self.current_line.depth += indent
             else:
                 self.current_line = type(depth=self.current_line.depth + indent)
             return  # Line is empty, don't emit. Creating a new one unnecessary.
 
         complete_line = self.current_line
         self.current_line = type(depth=complete_line.depth + indent)
         yield complete_line
 
     def visit(self, node: LN) -> Iterator[Line]:
         """Main method to visit `node` and its children.
 
         Yields :class:`Line` objects.
         """
         if isinstance(self.current_line, UnformattedLines):
             # File contained `# fmt: off`
             yield from self.visit_unformatted(node)
 
         else:
             yield from super().visit(node)
 
     def visit_default(self, node: LN) -> Iterator[Line]:
         """Default `visit_*()` implementation. Recurses to children of `node`."""
         if isinstance(node, Leaf):
             any_open_brackets = self.current_line.bracket_tracker.any_open_brackets()
             try:
                 for comment in generate_comments(node):
                     if any_open_brackets:
                         # any comment within brackets is subject to splitting
                     elif comment.type == token.COMMENT:
                         # regular trailing comment
 
                     else:
                         # regular standalone comment
                         yield from self.line()
 
                         self.current_line.append(comment)
                         yield from self.line()
 
             except FormatOff as f_off:
                 f_off.trim_prefix(node)
                 yield from self.line(type=UnformattedLines)
                 yield from self.visit(node)
 
             except FormatOn as f_on:
                 # This only happens here if somebody says "fmt: on" multiple
                 # times in a row.
                 f_on.trim_prefix(node)
                 yield from self.visit_default(node)
 
             else:
                 normalize_prefix(node, inside_brackets=any_open_brackets)
                 if self.normalize_strings and node.type == token.STRING:
                 if node.type not in WHITESPACE:
                     self.current_line.append(node)
         yield from super().visit_default(node)
 
     def visit_INDENT(self, node: Node) -> Iterator[Line]:
         """Increase indentation level, maybe yield a line."""
         # In blib2to3 INDENT never holds comments.
         yield from self.line(+1)
         yield from self.visit_default(node)
 
     def visit_DEDENT(self, node: Node) -> Iterator[Line]:
         """Decrease indentation level, maybe yield a line."""
         # The current line might still wait for trailing comments.  At DEDENT time
         # there won't be any (they would be prefixes on the preceding NEWLINE).
         # Emit the line then.
         yield from self.line()
 
         # While DEDENT has no value, its prefix may contain standalone comments
         # that belong to the current indentation level.  Get 'em.
         yield from self.visit_default(node)
 
         # Finally, emit the dedent.
         yield from self.line(-1)
 
     def visit_stmt(
         self, node: Node, keywords: Set[str], parens: Set[str]
     ) -> Iterator[Line]:
         """Visit a statement.
 
         This implementation is shared for `if`, `while`, `for`, `try`, `except`,
         `def`, `with`, `class`, `assert` and assignments.
 
         The relevant Python language `keywords` for a given statement will be
         NAME leaves within it. This methods puts those on a separate line.
 
         `parens` holds a set of string leaf values immediately after which
         invisible parens should be put.
         """
         normalize_invisible_parens(node, parens_after=parens)
         for child in node.children:
             if child.type == token.NAME and child.value in keywords:  # type: ignore
                 yield from self.line()
 
             yield from self.visit(child)
 
     def visit_suite(self, node: Node) -> Iterator[Line]:
         """Visit a suite."""
         if self.is_pyi and is_stub_suite(node):
         else:
             yield from self.visit_default(node)
 
     def visit_simple_stmt(self, node: Node) -> Iterator[Line]:
         """Visit a statement without nested statements."""
         is_suite_like = node.parent and node.parent.type in STATEMENT
         if is_suite_like:
 
         else:
             if not self.is_pyi or not node.parent or not is_stub_suite(node.parent):
                 yield from self.line()
             yield from self.visit_default(node)
 
     def visit_async_stmt(self, node: Node) -> Iterator[Line]:
         """Visit `async def`, `async for`, `async with`."""
 
 
 
 
     def visit_decorators(self, node: Node) -> Iterator[Line]:
         """Visit decorators."""
         for child in node.children:
             yield from self.line()
             yield from self.visit(child)
 
     def visit_SEMI(self, leaf: Leaf) -> Iterator[Line]:
         """Remove a semicolon and put the other statement on a separate line."""
 
     def visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]:
         """End of file. Process outstanding comments and end with a newline."""
         yield from self.visit_default(leaf)
         yield from self.line()
 
     def visit_unformatted(self, node: LN) -> Iterator[Line]:
         """Used when file contained a `# fmt: off`."""
         if isinstance(node, Node):
             for child in node.children:
                 yield from self.visit(child)
 
         else:
             try:
                 self.current_line.append(node)
 
             if node.type == token.ENDMARKER:
                 # somebody decided not to put a final `# fmt: on`
 
     def __attrs_post_init__(self) -> None:
         """You are in a twisty little maze of passages."""
         v = self.visit_stmt
         Ø: Set[str] = set()
         self.visit_assert_stmt = partial(v, keywords={"assert"}, parens={"assert", ","})
         self.visit_if_stmt = partial(
             v, keywords={"if", "else", "elif"}, parens={"if", "elif"}
         )
         self.visit_while_stmt = partial(v, keywords={"while", "else"}, parens={"while"})
         self.visit_for_stmt = partial(v, keywords={"for", "else"}, parens={"for", "in"})
         self.visit_try_stmt = partial(
             v, keywords={"try", "except", "else", "finally"}, parens=Ø
         )
         self.visit_except_clause = partial(v, keywords={"except"}, parens=Ø)
         self.visit_with_stmt = partial(v, keywords={"with"}, parens=Ø)
         self.visit_funcdef = partial(v, keywords={"def"}, parens=Ø)
         self.visit_classdef = partial(v, keywords={"class"}, parens=Ø)
         self.visit_expr_stmt = partial(v, keywords=Ø, parens=ASSIGNMENTS)
         self.visit_return_stmt = partial(v, keywords={"return"}, parens={"return"})
         self.visit_import_from = partial(v, keywords=Ø, parens={"import"})
         self.visit_async_funcdef = self.visit_async_stmt
         self.visit_decorated = self.visit_decorators
 
 
 IMPLICIT_TUPLE = {syms.testlist, syms.testlist_star_expr, syms.exprlist}
 BRACKET = {token.LPAR: token.RPAR, token.LSQB: token.RSQB, token.LBRACE: token.RBRACE}
 OPENING_BRACKETS = set(BRACKET.keys())
 CLOSING_BRACKETS = set(BRACKET.values())
 BRACKETS = OPENING_BRACKETS | CLOSING_BRACKETS
 ALWAYS_NO_SPACE = CLOSING_BRACKETS | {token.COMMA, STANDALONE_COMMENT}
 
 
 def whitespace(leaf: Leaf, *, complex_subscript: bool) -> str:  # noqa C901
     """Return whitespace prefix if needed for the given `leaf`.
 
     `complex_subscript` signals whether the given leaf is part of a subscription
     which has non-trivial arguments, like arithmetic expressions or function calls.
     """
     NO = ""
     SPACE = " "
     DOUBLESPACE = "  "
     t = leaf.type
     p = leaf.parent
     v = leaf.value
     if t in ALWAYS_NO_SPACE:
         return NO
 
     if t == token.COMMENT:
 
     assert p is not None, f"INTERNAL ERROR: hand-made leaf without parent: {leaf!r}"
     if t == token.COLON and p.type not in {
         syms.subscript,
         syms.subscriptlist,
         syms.sliceop,
     }:
         return NO
 
     prev = leaf.prev_sibling
     if not prev:
         prevp = preceding_leaf(p)
         if not prevp or prevp.type in OPENING_BRACKETS:
 
         if t == token.COLON:
 
 
 
         if prevp.type == token.EQUAL:
 
                     # A bit hacky: if the equal sign has whitespace, it means we
                     # previously found it's a typed argument.  So, we're using
                     # that, too.
 
         elif prevp.type in STARS:
 
         elif prevp.type == token.COLON:
 
         elif (
             prevp.parent
             and prevp.parent.type == syms.factor
             and prevp.type in MATH_OPERATORS
         ):
 
         elif (
             prevp.type == token.RIGHTSHIFT
             and prevp.parent
             and prevp.parent.type == syms.shift_expr
             and prevp.prev_sibling
             and prevp.prev_sibling.type == token.NAME
             and prevp.prev_sibling.value == "print"  # type: ignore
         ):
             # Python 2 print chevron
 
     elif prev.type in OPENING_BRACKETS:
         return NO
 
     if p.type in {syms.parameters, syms.arglist}:
         # untyped function signatures or calls
         if not prev or prev.type != token.COMMA:
             return NO
 
     elif p.type == syms.varargslist:
         # lambdas
 
     elif p.type == syms.typedargslist:
         # typed function signatures
 
 
             # A bit hacky: if the equal sign has whitespace, it means we
             # previously found it's a typed argument.  So, we're using that, too.
 
 
     elif p.type == syms.tname:
         # type names
 
     elif p.type == syms.trailer:
         # attributes and calls
 
 
 
 
     elif p.type == syms.argument:
         # single argument
 
 
 
     elif p.type == syms.decorator:
         # decorators
 
     elif p.type == syms.dotted_name:
 
 
     elif p.type == syms.classdef:
 
 
     elif p.type in {syms.subscript, syms.sliceop}:
         # indexing
 
 
 
     elif p.type == syms.atom:
             # dots, but not the first one.
 
     elif p.type == syms.dictsetmaker:
         # dict unpacking
 
     elif p.type in {syms.factor, syms.star_expr}:
         # unary ops
 
 
 
 
     elif p.type == syms.import_from:
 
 
 
     elif p.type == syms.sliceop:
 
     return SPACE
 
 
 def preceding_leaf(node: Optional[LN]) -> Optional[Leaf]:
     """Return the first leaf that precedes `node`, if any."""
     while node:
         res = node.prev_sibling
         if res:
             if isinstance(res, Leaf):
                 return res
 
 
 
 
 
 def child_towards(ancestor: Node, descendant: LN) -> Optional[LN]:
     """Return the child of `ancestor` that contains `descendant`."""
 
 
 def container_of(leaf: Leaf) -> LN:
     """Return `leaf` or one of its ancestors that is the topmost container of it.
 
     By "container" we mean a node where `leaf` is the very first child.
     """
 
 
 
 
 
 def is_split_after_delimiter(leaf: Leaf, previous: Leaf = None) -> int:
     """Return the priority of the `leaf` delimiter, given a line break after it.
 
     The delimiter priorities returned here are from those delimiters that would
     cause a line break after themselves.
 
     Higher numbers are higher priority.
     """
     if leaf.type == token.COMMA:
 
     return 0
 
 
 def is_split_before_delimiter(leaf: Leaf, previous: Leaf = None) -> int:
     """Return the priority of the `leaf` delimiter, given a line before after it.
 
     The delimiter priorities returned here are from those delimiters that would
     cause a line break before themselves.
 
     Higher numbers are higher priority.
     """
     if is_vararg(leaf, within=VARARGS_PARENTS | UNPACKING_PARENTS):
         # * and ** might also be MATH_OPERATORS but in this case they are not.
         # Don't treat them as a delimiter.
 
     if (
         leaf.type == token.DOT
         and leaf.parent
         and leaf.parent.type not in {syms.import_from, syms.dotted_name}
         and (previous is None or previous.type in CLOSING_BRACKETS)
     ):
 
     if (
         leaf.type in MATH_OPERATORS
         and leaf.parent
         and leaf.parent.type not in {syms.factor, syms.star_expr}
     ):
         return MATH_PRIORITIES[leaf.type]
 
     if leaf.type in COMPARATORS:
 
     if (
         leaf.type == token.STRING
         and previous is not None
         and previous.type == token.STRING
     ):
 
     if leaf.type != token.NAME:
         return 0
 
     if (
         leaf.value == "for"
         and leaf.parent
         and leaf.parent.type in {syms.comp_for, syms.old_comp_for}
     ):
 
     if (
         leaf.value == "if"
         and leaf.parent
         and leaf.parent.type in {syms.comp_if, syms.old_comp_if}
     ):
 
     if leaf.value in {"if", "else"} and leaf.parent and leaf.parent.type == syms.test:
 
     if leaf.value == "is":
 
     if (
         leaf.value == "in"
         and leaf.parent
         and leaf.parent.type in {syms.comp_op, syms.comparison}
         and not (
             previous is not None
             and previous.type == token.NAME
             and previous.value == "not"
         )
     ):
 
     if (
         leaf.value == "not"
         and leaf.parent
         and leaf.parent.type == syms.comp_op
         and not (
             previous is not None
             and previous.type == token.NAME
             and previous.value == "is"
         )
     ):
 
     if leaf.value in LOGIC_OPERATORS and leaf.parent:
 
     return 0
 
 
 FMT_OFF = {"# fmt: off", "# fmt:off", "# yapf: disable"}
 FMT_ON = {"# fmt: on", "# fmt:on", "# yapf: enable"}
 
 
 def generate_comments(leaf: LN) -> Iterator[Leaf]:
     """Clean the prefix of the `leaf` and generate comments from it, if any.
 
     Comments in lib2to3 are shoved into the whitespace prefix.  This happens
     in `pgen2/driver.py:Driver.parse_tokens()`.  This was a brilliant implementation
     move because it does away with modifying the grammar to include all the
     possible places in which comments can be placed.
 
     The sad consequence for us though is that comments don't "belong" anywhere.
     This is why this function generates simple parentless Leaf objects for
     comments.  We simply don't know what the correct parent should be.
 
     No matter though, we can live without this.  We really only need to
     differentiate between inline and standalone comments.  The latter don't
     share the line with any code.
 
     Inline comments are emitted as regular token.COMMENT leaves.  Standalone
     are emitted with a fake STANDALONE_COMMENT token identifier.
     """
     for pc in list_comments(leaf.prefix, is_endmarker=leaf.type == token.ENDMARKER):
         yield Leaf(pc.type, pc.value, prefix="\n" * pc.newlines)
         if pc.value in FMT_ON:
             raise FormatOn(pc.consumed)
 
         if pc.value in FMT_OFF:
             if pc.type == STANDALONE_COMMENT:
                 raise FormatOff(pc.consumed)
 
 
 
 @dataclass
 class ProtoComment:
     type: int  # token.COMMENT or STANDALONE_COMMENT
     value: str  # content of the comment
     newlines: int  # how many newlines before the comment
     consumed: int  # how many characters of the original leaf's prefix did we consume
 
 
 @lru_cache(maxsize=4096)
 def list_comments(prefix: str, *, is_endmarker: bool) -> List[ProtoComment]:
     result: List[ProtoComment] = []
     if not prefix or "#" not in prefix:
         return result
 
     consumed = 0
     nlines = 0
     for index, line in enumerate(prefix.split("\n")):
         consumed += len(line) + 1  # adding the length of the split '\n'
         line = line.lstrip()
         if not line:
             nlines += 1
         if not line.startswith("#"):
             continue
 
         if index == 0 and not is_endmarker:
         else:
             comment_type = STANDALONE_COMMENT
         comment = make_comment(line)
         result.append(
             ProtoComment(
                 type=comment_type, value=comment, newlines=nlines, consumed=consumed
             )
         )
         nlines = 0
     return result
 
 
 def make_comment(content: str) -> str:
     """Return a consistently formatted comment from the given `content` string.
 
     All comments (except for "##", "#!", "#:") should have a single space between
     the hash sign and the content.
 
     If `content` didn't start with a hash sign, one is provided.
     """
     content = content.rstrip()
     if not content:
 
     if content[0] == "#":
         content = content[1:]
     if content and content[0] not in " !:#":
     return "#" + content
 
 
 def split_line(
     line: Line, line_length: int, inner: bool = False, py36: bool = False
 ) -> Iterator[Line]:
     """Split a `line` into potentially many lines.
 
     They should fit in the allotted `line_length` but might not be able to.
     `inner` signifies that there were a pair of brackets somewhere around the
     current `line`, possibly transitively. This means we can fallback to splitting
     by delimiters if the LHS/RHS don't yield any results.
 
     If `py36` is True, splitting may generate syntax that is only compatible
     with Python 3.6 and later.
     """
     if isinstance(line, UnformattedLines) or line.is_comment:
         yield line
         return
 
     line_str = str(line).strip("\n")
     if not line.should_explode and is_line_short_enough(
         line, line_length=line_length, line_str=line_str
     ):
         yield line
         return
 
     split_funcs: List[SplitFunc]
 
 
             # All splits failed, best effort split with no omits.
             # This mostly happens to multiline strings that are by definition
             # reported as not fitting a single line.
 
         # We are accumulating lines in `result` because we might want to abort
         # mission and return the original line in the end, or attempt a different
         # split altogether.
 
 
 
 
 
 def left_hand_split(line: Line, py36: bool = False) -> Iterator[Line]:
     """Split line into many lines, starting with the first matching bracket pair.
 
     Note: this usually looks weird, only use this for function definitions.
     Prefer RHS otherwise.  This is why this function is not symmetrical with
     :func:`right_hand_split` which also handles optional parentheses.
     """
     # Since body is a new indent level, remove spurious leading whitespace.
     # Build the new lines.
 
 
 def right_hand_split(
     line: Line, line_length: int, py36: bool = False, omit: Collection[LeafID] = ()
 ) -> Iterator[Line]:
     """Split line into many lines, starting with the last matching bracket pair.
 
     If the split was by optional parentheses, attempt splitting without them, too.
     `omit` is a collection of closing bracket IDs that shouldn't be considered for
     this split.
 
     Note: running this function modifies `bracket_depth` on the leaves of `line`.
     """
     # Since body is a new indent level, remove spurious leading whitespace.
         # No `head` means the split failed. Either `tail` has all content or
         # the matching `opening_bracket` wasn't available on `line` anymore.
 
     # Build the new lines.
         # the body shouldn't be exploded
         # the opening bracket is an optional paren
         # the closing bracket is an optional paren
         # it's not an import (optional parens are the only thing we can split on
         # in this case; attempting a split without them is a waste of time)
         # there are no standalone comments in the body
         # and we can actually remove the parens
 
 
 
 
 
 def bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None:
     """Raise :exc:`CannotSplit` if the last left- or right-hand split failed.
 
     Do nothing otherwise.
 
     A left- or right-hand split is based on a pair of brackets. Content before
     (and including) the opening bracket is left on one line, content inside the
     brackets is put on a separate line, and finally content starting with and
     following the closing bracket is put on a separate line.
 
     Those are called `head`, `body`, and `tail`, respectively. If the split
     produced the same line (all content in `head`) or ended up with an empty `body`
     and the `tail` is just the closing bracket, then it's considered failed.
     """
 
 
 
 def dont_increase_indentation(split_func: SplitFunc) -> SplitFunc:
     """Normalize prefix of the first leaf in every line returned by `split_func`.
 
     This is a decorator over relevant split functions.
     """
 
     @wraps(split_func)
     def split_wrapper(line: Line, py36: bool = False) -> Iterator[Line]:
 
     return split_wrapper
 
 
 @dont_increase_indentation
 def delimiter_split(line: Line, py36: bool = False) -> Iterator[Line]:
     """Split according to delimiters of the highest priority.
 
     If `py36` is True, the split will add trailing commas also in function
     signatures that contain `*` and `**`.
     """
 
 
 
 
 
 
 
 
 
 
 
 @dont_increase_indentation
 def standalone_comment_split(line: Line, py36: bool = False) -> Iterator[Line]:
     """Split standalone comments from the rest of the line."""
 
 
 
 
 
 
 
 
 def is_import(leaf: Leaf) -> bool:
     """Return True if the given leaf starts an import statement."""
     p = leaf.parent
     t = leaf.type
     v = leaf.value
     return bool(
         t == token.NAME
         and (
             (v == "import" and p and p.type == syms.import_name)
             or (v == "from" and p and p.type == syms.import_from)
         )
     )
 
 
 def normalize_prefix(leaf: Leaf, *, inside_brackets: bool) -> None:
     """Leave existing extra newlines if not `inside_brackets`. Remove everything
     else.
 
     Note: don't use backslashes for formatting or you'll lose your voting rights.
     """
     if not inside_brackets:
         spl = leaf.prefix.split("#")
         if "\\" not in spl[0]:
             nl_count = spl[-1].count("\n")
             if len(spl) > 1:
             leaf.prefix = "\n" * nl_count
             return
 
     leaf.prefix = ""
 
 
 def normalize_string_prefix(leaf: Leaf, remove_u_prefix: bool = False) -> None:
     """Make all string prefixes lowercase.
 
     If remove_u_prefix is given, also removes any u prefix from the string.
 
     Note: Mutates its argument.
     """
 
 
 def normalize_string_quotes(leaf: Leaf) -> None:
     """Prefer double quotes but only if it doesn't cause more escaping.
 
     Adds or removes backslashes as appropriate. Doesn't parse and fix
     strings nested in f-strings (yet).
 
     Note: Mutates its argument.
     """
 
 
             # There's at least one unescaped new_quote in this raw string
             # so converting is impossible
 
         # Do not introduce or remove backslashes in raw strings
         # remove unnecessary escapes
             # Consider the string without unnecessary escapes as the original
                 # Do not introduce backslashes in interpolated expressions
         # edge case:
 
 
 
 
 def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:
     """Make existing optional parentheses invisible or create new ones.
 
     `parens_after` is a set of string leaf values immeditely after which parens
     should be put.
 
     Standardizes on visible parentheses for single-element tuples, and keeps
     existing visible parentheses for other tuples and generator expressions.
     """
     for pc in list_comments(node.prefix, is_endmarker=False):
             # This `node` has a prefix with `# fmt: off`, don't mess with parens.
 
     check_lpar = False
     for index, child in enumerate(list(node.children)):
         if check_lpar:
                 # wrap child in visible parentheses
                 # "import from" nodes store parentheses directly as part of
                 # the statement
                     # make parentheses invisible
                     # insert invisible parentheses
 
                 # wrap child in invisible parentheses
 
         check_lpar = isinstance(child, Leaf) and child.value in parens_after
 
 
 def normalize_fmt_off(node: Node) -> None:
     """Allow `# fmt: off`/`# fmt: on` within bracket pairs.
 
     Ignores `# fmt: off` and `# fmt: on` outside of brackets.
 
     Raises :exc:`SyntaxError` if no matching `# fmt: on` is found for a `# fmt: off`
     given inside brackets.
     """
     try_again = True
     while try_again:
         try_again = hide_fmt_off(node)
 
 
 def hide_fmt_off(node: Node) -> bool:
     bt = BracketTracker()
     for leaf in node.leaves():
         bt.mark(leaf)
         if bt.depth == 0:
             continue
 
         previous_consumed = 0
         for comment in list_comments(leaf.prefix, is_endmarker=False):
             if comment.value in FMT_OFF:
 
             previous_consumed += comment.consumed
 
     return False
 
 
 def generate_ignored_nodes(leaf: Leaf) -> Iterator[LN]:
 
 
 
 
 def maybe_make_parens_invisible_in_atom(node: LN) -> bool:
     """If it's safe, make the parens in the atom `node` invisible, recursively."""
 
         # make parentheses invisible
 
 
 
 def is_empty_tuple(node: LN) -> bool:
     """Return True if `node` holds an empty tuple."""
 
 
 def is_one_tuple(node: LN) -> bool:
     """Return True if `node` holds a tuple with one element, with or without parens."""
 
 
 
 
 
 def is_yield(node: LN) -> bool:
     """Return True if `node` holds a `yield` or `yield from` expression."""
 
 
 
 
 
 
 
 def is_vararg(leaf: Leaf, within: Set[NodeType]) -> bool:
     """Return True if `leaf` is a star or double star in a vararg or kwarg.
 
     If `within` includes VARARGS_PARENTS, this applies to function signatures.
     If `within` includes UNPACKING_PARENTS, it applies to right hand-side
     extended iterable unpacking (PEP 3132) and additional unpacking
     generalizations (PEP 448).
     """
     if leaf.type not in STARS or not leaf.parent:
         return False
 
         # Star expressions are also used as assignment targets in extended
         # iterable unpacking (PEP 3132).  See what its parent is instead.
 
 
 
 
 def is_multiline_string(leaf: Leaf) -> bool:
     """Return True if `leaf` is a multiline string that actually spans many lines."""
 
 
 def is_stub_suite(node: Node) -> bool:
     """Return True if `node` is a suite with a stub body."""
 
 
 
 def is_stub_body(node: LN) -> bool:
     """Return True if `node` is a simple statement containing an ellipsis."""
 
 
 
 
 def max_delimiter_priority_in_atom(node: LN) -> int:
     """Return maximum delimiter priority inside `node`.
 
     This is specific to atoms with contents contained in a pair of parentheses.
     If `node` isn't an atom or there are no enclosing parentheses, returns 0.
     """
 
 
 
 
 
 def ensure_visible(leaf: Leaf) -> None:
     """Make sure parentheses are visible.
 
     They could be invisible as part of some statements (see
     :func:`normalize_invible_parens` and :func:`visit_import_from`).
     """
 
 
 def should_explode(line: Line, opening_bracket: Leaf) -> bool:
     """Should `line` immediately be split with `delimiter_split()` after RHS?"""
 
 
 
 
 def is_python36(node: Node) -> bool:
     """Return True if the current file is using Python 3.6+ features.
 
     Currently looking for:
     - f-strings; and
     - trailing commas after * or ** in function signatures and calls.
     """
     for n in node.pre_order():
         if n.type == token.STRING:
             value_head = n.value[:2]  # type: ignore
             if value_head in {'f"', 'F"', "f'", "F'", "rf", "fr", "RF", "FR"}:
 
         elif (
             n.type in {syms.typedargslist, syms.arglist}
             and n.children
             and n.children[-1].type == token.COMMA
         ):
 
 
     return False
 
 
 def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[LeafID]]:
     """Generate sets of closing bracket IDs that should be omitted in a RHS.
 
     Brackets can be omitted if the entire trailer up to and including
     a preceding closing bracket fits in one line.
 
     Yielded sets are cumulative (contain results of previous yields, too).  First
     set is empty.
     """
 
 
 
 
 
                 # Empty brackets would fail a split so treat them as "inner"
                 # brackets (e.g. only add them to the `omit` set if another
                 # pair of brackets was good enough.
 
 
 
 def get_future_imports(node: Node) -> Set[str]:
     """Return a set of __future__ imports in the file."""
     imports = set()
     for child in node.children:
         if child.type != syms.simple_stmt:
         first_child = child.children[0]
         if isinstance(first_child, Leaf):
             # Continue looking if we see a docstring; otherwise stop.
         elif first_child.type == syms.import_from:
         else:
             break
     return imports
 
 
 def gen_python_files_in_dir(
     path: Path,
     root: Path,
     include: Pattern[str],
     exclude: Pattern[str],
     report: "Report",
 ) -> Iterator[Path]:
     """Generate all files under `path` whose paths are not excluded by the
     `exclude` regex, but are included by the `include` regex.
 
     Symbolic links pointing outside of the root directory are ignored.
 
     `report` is where output about exclusions goes.
     """
 
 
 
 
 
 
 @lru_cache()
 def find_project_root(srcs: Iterable[str]) -> Path:
     """Return a directory containing .git, .hg, or pyproject.toml.
 
     That directory can be one of the directories passed in `srcs` or their
     common parent.
 
     If no directory in the tree contains a marker that would specify it's the
     project root, the root of the file system is returned.
     """
 
         # Append a fake file so `parents` below returns `common_base_dir`, too.
 
 
 
 
 
 @dataclass
 class Report:
     """Provides a reformatting counter. Can be rendered with `str(report)`."""
 
     check: bool = False
     quiet: bool = False
     verbose: bool = False
     change_count: int = 0
     same_count: int = 0
     failure_count: int = 0
 
     def done(self, src: Path, changed: Changed) -> None:
         """Increment the counter for successful reformatting. Write out a message."""
 
     def failed(self, src: Path, message: str) -> None:
         """Increment the counter for failed reformatting. Write out a message."""
 
     def path_ignored(self, path: Path, message: str) -> None:
 
     @property
     def return_code(self) -> int:
         """Return the exit code that the app should use.
 
         This considers the current state of changed files and failures:
         - if there were any failures, return 123;
         - if any files were changed and --check is being used, return 1;
         - otherwise return 0.
         """
         # According to http://tldp.org/LDP/abs/html/exitcodes.html starting with
         # 126 we have special returncodes reserved by the shell.
 
 
 
     def __str__(self) -> str:
         """Render a color report of the current state.
 
         Use `click.unstyle` to remove colors.
         """
 
 
 def assert_equivalent(src: str, dst: str) -> None:
     """Raise AssertionError if `src` and `dst` aren't equivalent."""
 
 
 
 
 
 
 
 
 
 
 
 
 
 def assert_stable(
     src: str, dst: str, line_length: int, mode: FileMode = FileMode.AUTO_DETECT
 ) -> None:
     """Raise AssertionError if `dst` reformats differently the second time."""
 
 
 def dump_to_file(*output: str) -> str:
     """Dump `output` to a temporary file. Return path to the file."""
 
 
 
 def diff(a: str, b: str, a_name: str, b_name: str) -> str:
     """Return a unified diff string between strings `a` and `b`."""
 
 
 
 def cancel(tasks: Iterable[asyncio.Task]) -> None:
     """asyncio signal handler that cancels all `tasks` and reports to stderr."""
 
 
 def shutdown(loop: BaseEventLoop) -> None:
     """Cancel all pending tasks on `loop`, wait for them, and close the loop."""
         # This part is borrowed from asyncio/runners.py in Python 3.7b2.
 
         # `concurrent.futures.Future` objects cannot be cancelled once they
         # are already running. There might be some when the `shutdown()` happened.
         # Silence their logger's spew about the event loop being closed.
 
 
 def sub_twice(regex: Pattern[str], replacement: str, original: str) -> str:
     """Replace `regex` with `replacement` twice on `original`.
 
     This is used by string normalization to perform replaces on
     overlapping matches.
     """
 
 
 def re_compile_maybe_verbose(regex: str) -> Pattern[str]:
     """Compile a regular expression string in `regex`.
 
     If it contains newlines, use verbose mode.
     """
 
 
 def enumerate_reversed(sequence: Sequence[T]) -> Iterator[Tuple[Index, T]]:
     """Like `reversed(enumerate(sequence))` if that were possible."""
 
 
 def enumerate_with_length(
     line: Line, reversed: bool = False
 ) -> Iterator[Tuple[Index, Leaf, int]]:
     """Return an enumeration of leaves with their length.
 
     Stops prematurely on multiline strings and standalone comments.
     """
 
 
 
 
 def is_line_short_enough(line: Line, *, line_length: int, line_str: str = "") -> bool:
     """Return True if `line` is no longer than `line_length`.
 
     Uses the provided `line_str` rendering, if any, otherwise computes a new one.
     """
     if not line_str:
     return (
         len(line_str) <= line_length
         and "\n" not in line_str  # multiline strings
         and not line.contains_standalone_comments()
     )
 
 
 def can_be_split(line: Line) -> bool:
     """Return False if the line cannot be split *for sure*.
 
     This is not an exhaustive search but a cheap heuristic that we can use to
     avoid some unfortunate formattings (mostly around wrapping unsplittable code
     in unnecessary parentheses).
     """
 
 
 
 
 
 
 
 def can_omit_invisible_parens(line: Line, line_length: int) -> bool:
     """Does `line` have a shape safe to reformat without optional parens around it?
 
     Returns True for only a subset of potentially nice looking formattings but
     the point is to not return false positives that end up producing lines that
     are too long.
     """
         # Without delimiters the optional parentheses are useless.
 
         # With more than one delimiter of a kind the optional parentheses read better.
 
         # A single stranded method call doesn't require optional parentheses.
 
 
 
     # With a single delimiter, omit if the expression starts or ends with
     # a bracket.
 
                     # There are brackets we can further split on.
 
             # checked the entire string and line length wasn't exceeded
 
         # Note: we are not returning False here because a line might have *both*
         # a leading opening bracket and a trailing closing bracket.  If the
         # opening bracket doesn't match our rule, maybe the closing will.
 
             # don't use indexing for omitting optional parentheses;
             # it looks weird
             # Empty brackets don't help.
 
             # Additional wrapping of a multiline string in this situation is
             # unnecessary.
 
 
                 # There are brackets we can further split on.
 
 
 
 def get_cache_file(line_length: int, mode: FileMode) -> Path:
 
 
 def read_cache(line_length: int, mode: FileMode) -> Cache:
     """Read the cache if it exists and is well formed.
 
     If it is not well formed, the call to write_cache later should resolve the issue.
     """
 
 
 
 
 def get_cache_info(path: Path) -> CacheInfo:
     """Return the information used to check if a file is already formatted or not."""
 
 
 def filter_cached(cache: Cache, sources: Iterable[Path]) -> Tuple[Set[Path], Set[Path]]:
     """Split an iterable of paths in `sources` into two sets.
 
     The first contains paths of files that modified on disk or are not in the
     cache. The other contains paths to non-modified files.
     """
 
 
 def write_cache(
     cache: Cache, sources: Iterable[Path], line_length: int, mode: FileMode
 ) -> None:
     """Update the cache file."""
 
 
 if __name__ == "__main__":

 import asyncio
 from concurrent.futures import Executor, ProcessPoolExecutor
 from functools import partial
 import logging
 from multiprocessing import freeze_support
 from typing import Set, Tuple
 
 from aiohttp import web
 import aiohttp_cors
 import black
 import click
 
 # This is used internally by tests to shut down the server prematurely
 _stop_signal = asyncio.Event()
 
 VERSION_HEADER = "X-Protocol-Version"
 LINE_LENGTH_HEADER = "X-Line-Length"
 PYTHON_VARIANT_HEADER = "X-Python-Variant"
 SKIP_STRING_NORMALIZATION_HEADER = "X-Skip-String-Normalization"
 FAST_OR_SAFE_HEADER = "X-Fast-Or-Safe"
 
 BLACK_HEADERS = [
     VERSION_HEADER,
     LINE_LENGTH_HEADER,
     PYTHON_VARIANT_HEADER,
     SKIP_STRING_NORMALIZATION_HEADER,
     FAST_OR_SAFE_HEADER,
 ]
 
 
 class InvalidVariantHeader(Exception):
     pass
 
 
 @click.command(context_settings={"help_option_names": ["-h", "--help"]})
 @click.option(
     "--bind-host", type=str, help="Address to bind the server to.", default="localhost"
 )
 @click.option("--bind-port", type=int, help="Port to listen on", default=45484)
 @click.version_option(version=black.__version__)
 def main(bind_host: str, bind_port: int) -> None:
 
 
 def make_app() -> web.Application:
 
 
 
 
 async def handle(request: web.Request, executor: Executor) -> web.Response:
 
 
 
 
 def parse_python_variant_header(value: str) -> Tuple[bool, Set[black.TargetVersion]]:
                     # Default to lowest supported minor version.
 
 
 def patched_main() -> None:
 
 
 if __name__ == "__main__":

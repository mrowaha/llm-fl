> from imp import load_source
> import os
> import sys
> from . import logs
> from .shells import shell
> from .conf import settings
> from .const import DEFAULT_PRIORITY, ALL_ENABLED
> from .exceptions import EmptyCommand
> from .utils import get_alias, format_raw_script
> from .output_readers import get_output
  
  
> class Command(object):
>     """Command that should be fixed."""
  
>     def __init__(self, script, output):
>         """Initializes command with given values.
  
>         :type script: basestring
>         :type output: basestring
  
>         """
>         self.script = script
>         self.output = output
  
>     @property
>     def stdout(self):
  
>     @property
>     def stderr(self):
  
>     @property
>     def script_parts(self):
>         if not hasattr(self, '_script_parts'):
>             try:
>                 self._script_parts = shell.split_command(self.script)
  
>         return self._script_parts
  
>     def __eq__(self, other):
  
>     def __repr__(self):
>         return u'Command(script={}, output={})'.format(
>             self.script, self.output)
  
>     def update(self, **kwargs):
>         """Returns new command with replaced fields.
  
>         :rtype: Command
  
>         """
  
>     @classmethod
>     def from_raw_script(cls, raw_script):
>         """Creates instance of `Command` from a list of script parts.
  
>         :type raw_script: [basestring]
>         :rtype: Command
>         :raises: EmptyCommand
  
>         """
  
  
  
> class Rule(object):
>     """Rule for fixing commands."""
  
>     def __init__(self, name, match, get_new_command,
>                  enabled_by_default, side_effect,
>                  priority, requires_output):
>         """Initializes rule with given fields.
  
>         :type name: basestring
>         :type match: (Command) -> bool
>         :type get_new_command: (Command) -> (basestring | [basestring])
>         :type enabled_by_default: boolean
>         :type side_effect: (Command, basestring) -> None
>         :type priority: int
>         :type requires_output: bool
  
>         """
  
>     def __eq__(self, other):
  
>     def __repr__(self):
  
>     @classmethod
>     def from_path(cls, path):
>         """Creates rule instance from path.
  
>         :type path: pathlib.Path
>         :rtype: Rule
  
>         """
  
>     @property
>     def is_enabled(self):
>         """Returns `True` when rule enabled.
  
>         :rtype: bool
  
>         """
  
>     def is_match(self, command):
>         """Returns `True` if rule matches the command.
  
>         :type command: Command
>         :rtype: bool
  
>         """
  
  
>     def get_corrected_commands(self, command):
>         """Returns generator with corrected commands.
  
>         :type command: Command
>         :rtype: Iterable[CorrectedCommand]
  
>         """
  
  
> class CorrectedCommand(object):
>     """Corrected by rule command."""
  
>     def __init__(self, script, side_effect, priority):
>         """Initializes instance with given fields.
  
>         :type script: basestring
>         :type side_effect: (Command, basestring) -> None
>         :type priority: int
  
>         """
  
>     def __eq__(self, other):
>         """Ignores `priority` field."""
  
>     def __hash__(self):
  
>     def __repr__(self):
  
>     def _get_script(self):
>         """Returns fixed commands script.
  
>         If `settings.repeat` is `True`, appends command with second attempt
>         of running fuck in case fixed command fails again.
  
>         """
  
>     def run(self, old_cmd):
>         """Runs command from rule for passed command.
  
>         :type old_cmd: Command
  
>         """
          # This depends on correct setting of PYTHONIOENCODING by the alias:
  

 import io
 import os
 import shlex
 import six
 from collections import namedtuple
 from ..logs import warn
 from ..utils import memoize
 from ..conf import settings
 from ..system import Path
 
 
 ShellConfiguration = namedtuple('ShellConfiguration', (
     'content', 'path', 'reload', 'can_configure_automatically'))
 
 
 class Generic(object):
     def get_aliases(self):
 
     def _expand_aliases(self, command_script):
 
     def from_shell(self, command_script):
         """Prepares command before running in app."""
 
     def to_shell(self, command_script):
         """Prepares command for running in shell."""
 
     def app_alias(self, alias_name):
 
     def instant_mode_alias(self, alias_name):
 
     def _get_history_file_name(self):
 
     def _get_history_line(self, command_script):
 
     @memoize
     def get_history(self):
 
     def _get_history_lines(self):
         """Returns list of history entries."""
 
 
 
     def and_(self, *commands):
 
     def or_(self, *commands):
 
     def how_to_configure(self):
 
     def split_command(self, command):
         """Split the command using shell-like syntax."""
 
 
 
     def encode_utf8(self, command):
 
     def decode_utf8(self, command_parts):
 
     def quote(self, s):
         """Return a shell-escaped version of the string s."""
 
 
 
     def _script_from_history(self, line):
 
     def put_to_history(self, command):
         """Adds fixed command to shell history.
 
         In most of shells we change history on shell-level, but not
         all shells support it (Fish).
 
         """
 
     def get_builtin_commands(self):
         """Returns shells builtin commands."""
 
     def info(self):
         """Returns the name and version of the current shell"""
 
     def _create_shell_configuration(self, content, path, reload):

 #!/usr/bin/env python3
 import asyncio
 import logging
 from concurrent.futures import ThreadPoolExecutor
 from contextlib import contextmanager, redirect_stderr
 from functools import partial, wraps
 from io import BytesIO, TextIOWrapper
 import os
 from pathlib import Path
 import re
 import sys
 from tempfile import TemporaryDirectory
 from typing import (
     Any,
     BinaryIO,
     Callable,
     Coroutine,
     Generator,
     List,
     Tuple,
     Iterator,
     TypeVar,
 )
 import unittest
 from unittest.mock import patch, MagicMock
 
 from click import unstyle
 from click.testing import CliRunner
 
 import black
 from black import Feature
 
 try:
     import blackd
     from aiohttp.test_utils import TestClient, TestServer
 else:
     has_blackd_deps = True
 
 ff = partial(black.format_file_in_place, mode=black.FileMode(), fast=True)
 fs = partial(black.format_str, mode=black.FileMode())
 THIS_FILE = Path(__file__)
 THIS_DIR = THIS_FILE.parent
 EMPTY_LINE = "# EMPTY LINE WITH WHITESPACE" + " (this comment will be removed)"
 PY36_ARGS = [
     f"--target-version={version.name.lower()}" for version in black.PY36_VERSIONS
 ]
 T = TypeVar("T")
 R = TypeVar("R")
 
 
 def dump_to_stderr(*output: str) -> str:
 
 
 def read_data(name: str, data: bool = True) -> Tuple[str, str]:
     """read_data('test_name') -> 'input', 'output'"""
     if not name.endswith((".py", ".pyi", ".out", ".diff")):
         name += ".py"
     _input: List[str] = []
     _output: List[str] = []
     base_dir = THIS_DIR / "data" if data else THIS_DIR
     with open(base_dir / name, "r", encoding="utf8") as test:
         lines = test.readlines()
     result = _input
     for line in lines:
         line = line.replace(EMPTY_LINE, "")
         if line.rstrip() == "# output":
             result = _output
             continue
 
         result.append(line)
     if _input and not _output:
         # If there's no output marker, treat the entire file as already pre-formatted.
     return "".join(_input).strip() + "\n", "".join(_output).strip() + "\n"
 
 
 @contextmanager
 def cache_dir(exists: bool = True) -> Iterator[Path]:
 
 
 @contextmanager
 def event_loop(close: bool) -> Iterator[None]:
 
 
 
 def async_test(f: Callable[..., Coroutine[Any, None, R]]) -> Callable[..., None]:
     @event_loop(close=True)
     @wraps(f)
     def wrapper(*args: Any, **kwargs: Any) -> None:
 
     return wrapper
 
 
 class BlackRunner(CliRunner):
     """Modify CliRunner so that stderr is not merged with stdout.
 
     This is a hack that can be removed once we depend on Click 7.x"""
 
     def __init__(self) -> None:
 
     @contextmanager
     def isolation(self, *args: Any, **kwargs: Any) -> Generator[BinaryIO, None, None]:
 
 
 class BlackTestCase(unittest.TestCase):
     maxDiff = None
 
     def assertFormatEqual(self, expected: str, actual: str) -> None:
 
     def invokeBlack(
         self, args: List[str], exit_code: int = 0, ignore_config: bool = True
     ) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_empty(self) -> None:
 
     def test_empty_ff(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_self(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_black(self) -> None:
 
     def test_piping(self) -> None:
 
     def test_piping_diff(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_setup(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_function(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_function2(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_expression(self) -> None:
 
     def test_expression_ff(self) -> None:
 
     def test_expression_diff(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_fstring(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_string_quotes(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_slices(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments2(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments3(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments4(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments5(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments6(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_cantfit(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_import_spacing(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_composition(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_empty_lines(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_string_prefixes(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_numeric_literals(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_numeric_literals_ignoring_underscores(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_numeric_literals_py2(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_python2(self) -> None:
         # black.assert_equivalent(source, actual)
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_python2_print_function(self) -> None:
         source, expected = read_data("python2_print_function")
         mode = black.FileMode(target_versions={black.TargetVersion.PY27})
         actual = fs(source, mode=mode)
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_python2_unicode_literals(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_stub(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_python37(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_fmtonoff(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_fmtonoff2(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_remove_empty_parentheses_after_class(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_new_line_between_class_and_code(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_bracket_match(self) -> None:
 
     def test_tab_comment_indentation(self) -> None:
 
 
         # mixed tabs and spaces (valid Python 2 code)
 
 
     def test_report_verbose(self) -> None:
 
 
 
 
     def test_report_quiet(self) -> None:
 
 
 
 
     def test_report_normal(self) -> None:
 
 
 
 
     def test_get_features_used(self) -> None:
 
     def test_get_future_imports(self) -> None:
 
     def test_debug_visitor(self) -> None:
 
 
 
 
     def test_format_file_contents(self) -> None:
 
     def test_endmarker(self) -> None:
 
     @unittest.skipIf(os.environ.get("SKIP_AST_PRINT"), "user set SKIP_AST_PRINT")
     def test_assertFormatEqual(self) -> None:
 
 
 
 
 
     def test_cache_broken_file(self) -> None:
 
     def test_cache_single_file_already_cached(self) -> None:
 
     @event_loop(close=False)
     def test_cache_multiple_files(self) -> None:
 
     def test_no_cache_when_writeback_diff(self) -> None:
 
     def test_no_cache_when_stdin(self) -> None:
 
     def test_read_cache_no_cachefile(self) -> None:
 
     def test_write_cache_read_cache(self) -> None:
 
     def test_filter_cached(self) -> None:
 
     def test_write_cache_creates_directory_if_needed(self) -> None:
 
     @event_loop(close=False)
     def test_failed_formatting_does_not_get_cached(self) -> None:
 
     def test_write_cache_write_fail(self) -> None:
 
     @event_loop(close=False)
     def test_check_diff_use_together(self) -> None:
             # Files which will be reformatted.
             # Files which will not be reformatted.
             # Multi file command.
 
     def test_no_files(self) -> None:
             # Without an argument, black exits with error code 0.
 
     def test_broken_symlink(self) -> None:
 
     def test_read_cache_line_lengths(self) -> None:
 
     def test_single_file_force_pyi(self) -> None:
             # verify cache with --pyi is separate
 
     @event_loop(close=False)
     def test_multi_file_force_pyi(self) -> None:
             # verify cache with --pyi is separate
 
     def test_pipe_force_pyi(self) -> None:
 
     def test_single_file_force_py36(self) -> None:
             # verify cache with --target-version is separate
 
     @event_loop(close=False)
     def test_multi_file_force_py36(self) -> None:
             # verify cache with --target-version is separate
 
     def test_pipe_force_py36(self) -> None:
 
     def test_include_exclude(self) -> None:
 
     def test_empty_include(self) -> None:
 
     def test_empty_exclude(self) -> None:
 
     def test_invalid_include_exclude(self) -> None:
 
     def test_preserves_line_endings(self) -> None:
 
     def test_preserves_line_endings_via_stdin(self) -> None:
 
     def test_assert_equivalent_different_asts(self) -> None:
 
     def test_symlink_out_of_root_directory(self) -> None:
         # `child` should behave like a symlink which resolved path is clearly
         # outside of the `root` directory.
         # `child` should behave like a strange file which resolved path is clearly
         # outside of the `root` directory.
 
     def test_shhh_click(self) -> None:
         # First, let's see if Click is crashing with a preferred ASCII charset.
         # Now, let's silence Click...
         # ...and confirm it's silent.
 
     def test_root_logger_not_used_directly(self) -> None:
 
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_request_needs_formatting(self) -> None:
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_request_no_change(self) -> None:
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_request_syntax_error(self) -> None:
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_unsupported_version(self) -> None:
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_supported_version(self) -> None:
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_invalid_python_variant(self) -> None:
 
 
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_pyi(self) -> None:
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_python_variant(self) -> None:
 
 
 
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_fast(self) -> None:
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_line_length(self) -> None:
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     @async_test
     async def test_blackd_invalid_line_length(self) -> None:
 
     @unittest.skipUnless(has_blackd_deps, "blackd's dependencies are not installed")
     def test_blackd_main(self) -> None:
 
 
 if __name__ == "__main__":

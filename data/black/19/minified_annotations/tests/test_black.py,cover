 #!/usr/bin/env python3
 import asyncio
 from concurrent.futures import ThreadPoolExecutor
 from contextlib import contextmanager
 from functools import partial
 from io import StringIO
 import os
 from pathlib import Path
 import sys
 from tempfile import TemporaryDirectory
 from typing import Any, List, Tuple, Iterator
 import unittest
 from unittest.mock import patch
 
 from click import unstyle
 from click.testing import CliRunner
 
 import black
 
 ll = 88
 ff = partial(black.format_file_in_place, line_length=ll, fast=True)
 fs = partial(black.format_str, line_length=ll)
 THIS_FILE = Path(__file__)
 THIS_DIR = THIS_FILE.parent
 EMPTY_LINE = "# EMPTY LINE WITH WHITESPACE" + " (this comment will be removed)"
 
 
 def dump_to_stderr(*output: str) -> str:
 
 
 def read_data(name: str) -> Tuple[str, str]:
     """read_data('test_name') -> 'input', 'output'"""
     if not name.endswith((".py", ".out", ".diff")):
         name += ".py"
     _input: List[str] = []
     _output: List[str] = []
     with open(THIS_DIR / name, "r", encoding="utf8") as test:
         lines = test.readlines()
     result = _input
     for line in lines:
         line = line.replace(EMPTY_LINE, "")
         if line.rstrip() == "# output":
 
         result.append(line)
     if _input and not _output:
         # If there's no output marker, treat the entire file as already pre-formatted.
         _output = _input[:]
     return "".join(_input).strip() + "\n", "".join(_output).strip() + "\n"
 
 
 @contextmanager
 def cache_dir(exists: bool = True) -> Iterator[Path]:
 
 
 @contextmanager
 def event_loop(close: bool) -> Iterator[None]:
 
 
 
 class BlackTestCase(unittest.TestCase):
     maxDiff = None
 
     def assertFormatEqual(self, expected: str, actual: str) -> None:
         if actual != expected and not os.environ.get("SKIP_AST_PRINT"):
             bdv: black.DebugVisitor[Any]
             black.out("Expected tree:", fg="green")
             try:
                 exp_node = black.lib2to3_parse(expected)
                 bdv = black.DebugVisitor()
                 list(bdv.visit(exp_node))
             black.out("Actual tree:", fg="red")
             try:
                 exp_node = black.lib2to3_parse(actual)
                 bdv = black.DebugVisitor()
                 list(bdv.visit(exp_node))
         self.assertEqual(expected, actual)
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_self(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_black(self) -> None:
 
     def test_piping(self) -> None:
 
     def test_piping_diff(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_setup(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_function(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_expression(self) -> None:
 
     def test_expression_ff(self) -> None:
 
     def test_expression_diff(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_fstring(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_string_quotes(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments2(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments3(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments4(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comments5(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_cantfit(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_import_spacing(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_composition(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_empty_lines(self) -> None:
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_python2(self) -> None:
         # black.assert_equivalent(source, actual)
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_fmtonoff(self) -> None:
 
     def test_report(self) -> None:
 
 
 
 
     def test_is_python36(self) -> None:
 
     def test_debug_visitor(self) -> None:
 
 
 
 
     def test_format_file_contents(self) -> None:
 
     def test_endmarker(self) -> None:
 
     @unittest.skipIf(os.environ.get("SKIP_AST_PRINT"), "user set SKIP_AST_PRINT")
     def test_assertFormatEqual(self) -> None:
 
 
 
 
 
     def test_cache_broken_file(self) -> None:
 
     def test_cache_single_file_already_cached(self) -> None:
 
     @event_loop(close=False)
     def test_cache_multiple_files(self) -> None:
 
     def test_no_cache_when_writeback_diff(self) -> None:
 
     def test_no_cache_when_stdin(self) -> None:
 
     def test_read_cache_no_cachefile(self) -> None:
 
     def test_write_cache_read_cache(self) -> None:
 
     def test_filter_cached(self) -> None:
 
     def test_write_cache_creates_directory_if_needed(self) -> None:
 
     @event_loop(close=False)
     def test_failed_formatting_does_not_get_cached(self) -> None:
 
     def test_write_cache_write_fail(self) -> None:
 
     def test_check_diff_use_together(self) -> None:
             # Files which will be reformatted.
 
             # Files which will not be reformatted.
 
             # Multi file command.
 
     @patch("black.dump_to_file", dump_to_stderr)
     def test_comment_in_decorator(self) -> None:
         source, expected = read_data("comments6")
         actual = fs(source)
         self.assertFormatEqual(expected, actual)
 
 
 if __name__ == "__main__":

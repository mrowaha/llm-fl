 #!/usr/bin/env python3
 
 import asyncio
 from asyncio.base_events import BaseEventLoop
 from concurrent.futures import Executor, ProcessPoolExecutor
 from enum import Enum
 from functools import partial, wraps
 import keyword
 import logging
 from multiprocessing import Manager
 import os
 from pathlib import Path
 import re
 import tokenize
 import signal
 import sys
 from typing import (
     Any,
     Callable,
     Collection,
     Dict,
     Generic,
     Iterable,
     Iterator,
     List,
     Optional,
     Set,
     Tuple,
     Type,
     TypeVar,
     Union,
 )
 
 from attr import dataclass, Factory
 import click
 
 # lib2to3 fork
 from blib2to3.pytree import Node, Leaf, type_repr
 from blib2to3 import pygram, pytree
 from blib2to3.pgen2 import driver, token
 from blib2to3.pgen2.parse import ParseError
 
 __version__ = "18.4a1"
 DEFAULT_LINE_LENGTH = 88
 # types
 syms = pygram.python_symbols
 FileContent = str
 Encoding = str
 Depth = int
 NodeType = int
 LeafID = int
 Priority = int
 Index = int
 LN = Union[Leaf, Node]
 SplitFunc = Callable[["Line", bool], Iterator["Line"]]
 out = partial(click.secho, bold=True, err=True)
 err = partial(click.secho, fg="red", err=True)
 
 
 class NothingChanged(UserWarning):
     """Raised by :func:`format_file` when reformatted code is the same as source."""
 
 
 class CannotSplit(Exception):
     """A readable split that fits the allotted line length is impossible.
 
     Raised by :func:`left_hand_split`, :func:`right_hand_split`, and
     :func:`delimiter_split`.
     """
 
 
 class FormatError(Exception):
     """Base exception for `# fmt: on` and `# fmt: off` handling.
 
     It holds the number of bytes of the prefix consumed before the format
     control comment appeared.
     """
 
     def __init__(self, consumed: int) -> None:
 
     def trim_prefix(self, leaf: Leaf) -> None:
 
     def leaf_from_consumed(self, leaf: Leaf) -> Leaf:
         """Returns a new Leaf from the consumed part of the prefix."""
 
 
 class FormatOn(FormatError):
     """Found a comment like `# fmt: on` in the file."""
 
 
 class FormatOff(FormatError):
     """Found a comment like `# fmt: off` in the file."""
 
 
 class WriteBack(Enum):
     NO = 0
     YES = 1
     DIFF = 2
 
 
 @click.command()
 @click.option(
     "-l",
     "--line-length",
     type=int,
     default=DEFAULT_LINE_LENGTH,
     help="How many character per line to allow.",
     show_default=True,
 )
 @click.option(
     "--check",
     is_flag=True,
     help=(
         "Don't write the files back, just return the status.  Return code 0 "
         "means nothing would change.  Return code 1 means some files would be "
         "reformatted.  Return code 123 means there was an internal error."
     ),
 )
 @click.option(
     "--diff",
     is_flag=True,
     help="Don't write the files back, just output a diff for each file on stdout.",
 )
 @click.option(
     "--fast/--safe",
     is_flag=True,
     help="If --fast given, skip temporary sanity checks. [default: --safe]",
 )
 @click.option(
     "-q",
     "--quiet",
     is_flag=True,
     help=(
         "Don't emit non-error messages to stderr. Errors are still emitted, "
         "silence those with 2>/dev/null."
     ),
 )
 @click.version_option(version=__version__)
 @click.argument(
     "src",
     nargs=-1,
     type=click.Path(
         exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True
     ),
 )
 @click.pass_context
 def main(
     ctx: click.Context,
     line_length: int,
     check: bool,
     diff: bool,
     fast: bool,
     quiet: bool,
     src: List[str],
 ) -> None:
     """The uncompromising code formatter."""
             # if a file was explicitly given, we don't care about its extension
 
 
 
 async def schedule_formatting(
     sources: List[Path],
     line_length: int,
     write_back: WriteBack,
     fast: bool,
     quiet: bool,
     loop: BaseEventLoop,
     executor: Executor,
 ) -> int:
     """Run formatting of `sources` in parallel using the provided `executor`.
 
     (Use ProcessPoolExecutors for actual parallelism.)
 
     `line_length`, `write_back`, and `fast` options are passed to
     :func:`format_file_in_place`.
     """
         # For diff output, we need locks to ensure we don't interleave output
         # from different processes.
 
 
 def format_file_in_place(
     src: Path,
     line_length: int,
     fast: bool,
     write_back: WriteBack = WriteBack.NO,
     lock: Any = None,  # multiprocessing.Manager().Lock() is some crazy proxy
 ) -> bool:
     """Format file under `src` path. Return True if changed.
 
     If `write_back` is True, write reformatted code back to stdout.
     `line_length` and `fast` options are passed to :func:`format_file_contents`.
     """
     with tokenize.open(src) as src_buffer:
         src_contents = src_buffer.read()
     try:
         dst_contents = format_file_contents(
             src_contents, line_length=line_length, fast=fast
         )
     except NothingChanged:
 
 
 
 def format_stdin_to_stdout(
     line_length: int, fast: bool, write_back: WriteBack = WriteBack.NO
 ) -> bool:
     """Format file on stdin. Return True if changed.
 
     If `write_back` is True, write reformatted code back to stdout.
     `line_length` and `fast` arguments are passed to :func:`format_file_contents`.
     """
 
 
 
 
 def format_file_contents(
     src_contents: str, line_length: int, fast: bool
 ) -> FileContent:
     """Reformat contents a file and return new contents.
 
     If `fast` is False, additionally confirm that the reformatted code is
     valid by calling :func:`assert_equivalent` and :func:`assert_stable` on it.
     `line_length` is passed to :func:`format_str`.
     """
     if src_contents.strip() == "":
 
     dst_contents = format_str(src_contents, line_length=line_length)
 
 
 
 def format_str(src_contents: str, line_length: int) -> FileContent:
     """Reformat a string and return new contents.
 
     `line_length` determines how many characters per line are allowed.
     """
     src_node = lib2to3_parse(src_contents)
 
 
 GRAMMARS = [
     pygram.python_grammar_no_print_statement_no_exec_statement,
     pygram.python_grammar_no_print_statement,
     pygram.python_grammar_no_exec_statement,
     pygram.python_grammar,
 ]
 
 
 def lib2to3_parse(src_txt: str) -> Node:
     """Given a string with source, return the lib2to3 Node."""
     grammar = pygram.python_grammar_no_print_statement
     if src_txt[-1] != "\n":
     for grammar in GRAMMARS:
         drv = driver.Driver(grammar, pytree.convert)
         try:
             result = drv.parse_string(src_txt, True)
 
         except ParseError as pe:
             lineno, column = pe.context[1]
             lines = src_txt.splitlines()
             try:
                 faulty_line = lines[lineno - 1]
             exc = ValueError(f"Cannot parse: {lineno}:{column}: {faulty_line}")
     else:
         raise exc from None
 
 
 
 def lib2to3_unparse(node: Node) -> str:
     """Given a lib2to3 node, return its string representation."""
 
 
 T = TypeVar("T")
 
 
 class Visitor(Generic[T]):
     """Basic lib2to3 visitor that yields things of type `T` on `visit()`."""
 
     def visit(self, node: LN) -> Iterator[T]:
         """Main method to visit `node` and its children.
 
         It tries to find a `visit_*()` method for the given `node.type`, like
         `visit_simple_stmt` for Node objects or `visit_INDENT` for Leaf objects.
         If no dedicated `visit_*()` method is found, chooses `visit_default()`
         instead.
 
         Then yields objects of type `T` from the selected visitor.
         """
 
     def visit_default(self, node: LN) -> Iterator[T]:
         """Default `visit_*()` implementation. Recurses to children of `node`."""
 
 
 @dataclass
 class DebugVisitor(Visitor[T]):
     tree_depth: int = 0
 
     def visit_default(self, node: LN) -> Iterator[T]:
 
                 # We don't have to handle prefixes for `Node` objects since
                 # that delegates to the first child anyway.
 
     @classmethod
     def show(cls, code: str) -> None:
         """Pretty-print the lib2to3 AST of a given string of `code`.
 
         Convenience method for debugging.
         """
 
 
 KEYWORDS = set(keyword.kwlist)
 WHITESPACE = {token.DEDENT, token.INDENT, token.NEWLINE}
 FLOW_CONTROL = {"return", "raise", "break", "continue"}
 STATEMENT = {
     syms.if_stmt,
     syms.while_stmt,
     syms.for_stmt,
     syms.try_stmt,
     syms.except_clause,
     syms.with_stmt,
     syms.funcdef,
     syms.classdef,
 }
 STANDALONE_COMMENT = 153
 LOGIC_OPERATORS = {"and", "or"}
 COMPARATORS = {
     token.LESS,
     token.GREATER,
     token.EQEQUAL,
     token.NOTEQUAL,
     token.LESSEQUAL,
     token.GREATEREQUAL,
 }
 MATH_OPERATORS = {
     token.PLUS,
     token.MINUS,
     token.STAR,
     token.SLASH,
     token.VBAR,
     token.AMPER,
     token.PERCENT,
     token.CIRCUMFLEX,
     token.TILDE,
     token.LEFTSHIFT,
     token.RIGHTSHIFT,
     token.DOUBLESTAR,
     token.DOUBLESLASH,
 }
 VARARGS = {token.STAR, token.DOUBLESTAR}
 COMPREHENSION_PRIORITY = 20
 COMMA_PRIORITY = 10
 LOGIC_PRIORITY = 5
 STRING_PRIORITY = 4
 COMPARATOR_PRIORITY = 3
 MATH_PRIORITY = 1
 
 
 @dataclass
 class BracketTracker:
     """Keeps track of brackets on a line."""
 
     depth: int = 0
     bracket_match: Dict[Tuple[Depth, NodeType], Leaf] = Factory(dict)
     delimiters: Dict[LeafID, Priority] = Factory(dict)
     previous: Optional[Leaf] = None
 
     def mark(self, leaf: Leaf) -> None:
         """Mark `leaf` with bracket-related metadata. Keep track of delimiters.
 
         All leaves receive an int `bracket_depth` field that stores how deep
         within brackets a given leaf is. 0 means there are no enclosing brackets
         that started on this line.
 
         If a leaf is itself a closing bracket, it receives an `opening_bracket`
         field that it forms a pair with. This is a one-directional link to
         avoid reference cycles.
 
         If a leaf is a delimiter (a token on which Black can split the line if
         needed) and it's on depth 0, its `id()` is stored in the tracker's
         `delimiters` field.
         """
 
 
     def any_open_brackets(self) -> bool:
         """Return True if there is an yet unmatched open bracket on the line."""
 
     def max_delimiter_priority(self, exclude: Iterable[LeafID] = ()) -> int:
         """Return the highest priority of a delimiter found on the line.
 
         Values are consistent with what `is_delimiter()` returns.
         Raises ValueError on no delimiters.
         """
 
 
 @dataclass
 class Line:
     """Holds leaves and comments. Can be printed with `str(line)`."""
 
     depth: int = 0
     leaves: List[Leaf] = Factory(list)
     comments: List[Tuple[Index, Leaf]] = Factory(list)
     bracket_tracker: BracketTracker = Factory(BracketTracker)
     inside_brackets: bool = False
     has_for: bool = False
     _for_loop_variable: bool = False
 
     def append(self, leaf: Leaf, preformatted: bool = False) -> None:
         """Add a new `leaf` to the end of the line.
 
         Unless `preformatted` is True, the `leaf` will receive a new consistent
         whitespace prefix and metadata applied by :class:`BracketTracker`.
         Trailing commas are maybe removed, unpacked for loop variables are
         demoted from being delimiters.
 
         Inline comments are put aside.
         """
 
             # Note: at this point leaf.prefix should be empty except for
             # imports, for which we only preserve newlines.
 
 
     def append_safe(self, leaf: Leaf, preformatted: bool = False) -> None:
         """Like :func:`append()` but disallow invalid standalone comment structure.
 
         Raises ValueError when any `leaf` is appended after a standalone comment
         or when a standalone comment is not the first leaf on the line.
         """
 
 
 
     @property
     def is_comment(self) -> bool:
         """Is this line a standalone comment?"""
 
     @property
     def is_decorator(self) -> bool:
         """Is this line a decorator?"""
 
     @property
     def is_import(self) -> bool:
         """Is this an import line?"""
 
     @property
     def is_class(self) -> bool:
         """Is this line a class definition?"""
 
     @property
     def is_def(self) -> bool:
         """Is this a function definition? (Also returns True for async defs.)"""
 
 
     @property
     def is_flow_control(self) -> bool:
         """Is this line a flow control statement?
 
         Those are `return`, `raise`, `break`, and `continue`.
         """
 
     @property
     def is_yield(self) -> bool:
         """Is this line a yield statement?"""
 
     def contains_standalone_comments(self, depth_limit: int = sys.maxsize) -> bool:
         """If so, needs to be split before emitting."""
 
 
     def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:
         """Remove trailing comma if there is one and it's safe."""
 
 
 
         # For parens let's check if it's safe to remove the comma.  If the
         # trailing one is the only one, we might mistakenly change a tuple
         # into a different type by removing the comma.
 
 
 
 
 
 
     def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:
         """In a for loop, or comprehension, the variables are often unpacks.
 
         To avoid splitting on the comma in this situation, increase the depth of
         tokens between `for` and `in`.
         """
 
 
     def maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool:
         """See `maybe_increment_for_loop_variable` above for explanation."""
 
 
     def append_comment(self, comment: Leaf) -> bool:
         """Add an inline or standalone comment to the line."""
 
 
 
 
     def comments_after(self, leaf: Leaf) -> Iterator[Leaf]:
         """Generate comments that should appear directly after `leaf`."""
 
 
 
     def remove_trailing_comma(self) -> None:
         """Remove the trailing comma and moves the comments attached to it."""
 
     def __str__(self) -> str:
         """Render the line."""
 
 
     def __bool__(self) -> bool:
         """Return True if the line has leaves or comments."""
 
 
 class UnformattedLines(Line):
     """Just like :class:`Line` but stores lines which aren't reformatted."""
 
     def append(self, leaf: Leaf, preformatted: bool = True) -> None:
         """Just add a new `leaf` to the end of the lines.
 
         The `preformatted` argument is ignored.
 
         Keeps track of indentation `depth`, which is useful when the user
         says `# fmt: on`. Otherwise, doesn't do anything with the `leaf`.
         """
 
 
     def __str__(self) -> str:
         """Render unformatted lines from leaves which were added with `append()`.
 
         `depth` is not used for indentation in this case.
         """
 
 
     def append_comment(self, comment: Leaf) -> bool:
         """Not implemented in this class. Raises `NotImplementedError`."""
 
     def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:
         """Does nothing and returns False."""
 
     def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:
         """Does nothing and returns False."""
 
 
 @dataclass
 class EmptyLineTracker:
     """Provides a stateful method that returns the number of potential extra
     empty lines needed before and after the currently processed line.
 
     Note: this tracker works on lines that haven't been split yet.  It assumes
     the prefix of the first leaf consists of optional newlines.  Those newlines
     are consumed by `maybe_empty_lines()` and included in the computation.
     """
     previous_line: Optional[Line] = None
     previous_after: int = 0
     previous_defs: List[int] = Factory(list)
 
     def maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:
         """Return the number of extra empty lines before and after the `current_line`.
 
         This is for separating `def`, `async def` and `class` with extra empty
         lines (two on module-level), as well as providing an extra empty line
         after flow control keywords to make them more prominent.
         """
 
 
     def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:
             # Consume the first leaf's extra newlines.
                 # Don't insert empty lines before the first line in the file.
 
                 # Don't insert empty lines between decorators.
 
 
 
 
 
 
 
 @dataclass
 class LineGenerator(Visitor[Line]):
     """Generates reformatted Line objects.  Empty lines are not emitted.
 
     Note: destroys the tree it's visiting by mutating prefixes of its leaves
     in ways that will no longer stringify to valid Python code on the tree.
     """
     current_line: Line = Factory(Line)
 
     def line(self, indent: int = 0, type: Type[Line] = Line) -> Iterator[Line]:
         """Generate a line.
 
         If the line is empty, only emit if it makes sense.
         If the line is too long, split it first and then generate.
 
         If any lines were generated, set up a new current_line.
         """
 
 
     def visit(self, node: LN) -> Iterator[Line]:
         """Main method to visit `node` and its children.
 
         Yields :class:`Line` objects.
         """
             # File contained `# fmt: off`
 
 
     def visit_default(self, node: LN) -> Iterator[Line]:
         """Default `visit_*()` implementation. Recurses to children of `node`."""
                         # any comment within brackets is subject to splitting
                         # regular trailing comment
 
                         # regular standalone comment
 
 
 
                 # This only happens here if somebody says "fmt: on" multiple
                 # times in a row.
 
 
     def visit_INDENT(self, node: Node) -> Iterator[Line]:
         """Increase indentation level, maybe yield a line."""
         # In blib2to3 INDENT never holds comments.
 
     def visit_DEDENT(self, node: Node) -> Iterator[Line]:
         """Decrease indentation level, maybe yield a line."""
         # DEDENT has no value. Additionally, in blib2to3 it never holds comments.
 
     def visit_stmt(
         self, node: Node, keywords: Set[str], parens: Set[str]
     ) -> Iterator[Line]:
         """Visit a statement.
 
         This implementation is shared for `if`, `while`, `for`, `try`, `except`,
         `def`, `with`, `class`, and `assert`.
 
         The relevant Python language `keywords` for a given statement will be
         NAME leaves within it. This methods puts those on a separate line.
 
         `parens` holds pairs of nodes where invisible parentheses should be put.
         Keys hold nodes after which opening parentheses should be put, values
         hold nodes before which closing parentheses should be put.
         """
 
 
     def visit_simple_stmt(self, node: Node) -> Iterator[Line]:
         """Visit a statement without nested statements."""
 
 
     def visit_async_stmt(self, node: Node) -> Iterator[Line]:
         """Visit `async def`, `async for`, `async with`."""
 
 
 
 
     def visit_decorators(self, node: Node) -> Iterator[Line]:
         """Visit decorators."""
 
     def visit_import_from(self, node: Node) -> Iterator[Line]:
         """Visit import_from and maybe put invisible parentheses.
 
         This is separate from `visit_stmt` because import statements don't
         support arbitrary atoms and thus handling of parentheses is custom.
         """
                     # make parentheses invisible
                     # insert invisible parentheses
 
 
 
     def visit_SEMI(self, leaf: Leaf) -> Iterator[Line]:
         """Remove a semicolon and put the other statement on a separate line."""
 
     def visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]:
         """End of file. Process outstanding comments and end with a newline."""
 
     def visit_unformatted(self, node: LN) -> Iterator[Line]:
         """Used when file contained a `# fmt: off`."""
 
 
                 # somebody decided not to put a final `# fmt: on`
 
     def __attrs_post_init__(self) -> None:
         """You are in a twisty little maze of passages."""
 
 
 IMPLICIT_TUPLE = {syms.testlist, syms.testlist_star_expr, syms.exprlist}
 BRACKET = {token.LPAR: token.RPAR, token.LSQB: token.RSQB, token.LBRACE: token.RBRACE}
 OPENING_BRACKETS = set(BRACKET.keys())
 CLOSING_BRACKETS = set(BRACKET.values())
 BRACKETS = OPENING_BRACKETS | CLOSING_BRACKETS
 ALWAYS_NO_SPACE = CLOSING_BRACKETS | {token.COMMA, STANDALONE_COMMENT}
 
 
 def whitespace(leaf: Leaf) -> str:  # noqa C901
     """Return whitespace prefix if needed for the given `leaf`."""
 
 
 
 
 
 
                     # A bit hacky: if the equal sign has whitespace, it means we
                     # previously found it's a typed argument.  So, we're using
                     # that, too.
 
 
 
 
             # Python 2 print chevron
 
 
         # untyped function signatures or calls
 
 
         # lambdas
 
 
         # typed function signatures
 
 
             # A bit hacky: if the equal sign has whitespace, it means we
             # previously found it's a typed argument.  So, we're using that, too.
 
 
         # type names
 
         # attributes and calls
 
 
 
 
         # single argument
 
 
 
         # decorators
 
 
 
 
 
         # indexing
 
 
 
             # dots, but not the first one.
 
         # list interior, including unpacking
 
         # dict and set interior, including unpacking
 
 
         # unary ops
 
 
 
 
 
 
 
 
 
 
 def preceding_leaf(node: Optional[LN]) -> Optional[Leaf]:
     """Return the first leaf that precedes `node`, if any."""
 
 
 
 
 
 def is_split_after_delimiter(leaf: Leaf, previous: Leaf = None) -> int:
     """Return the priority of the `leaf` delimiter, given a line break after it.
 
     The delimiter priorities returned here are from those delimiters that would
     cause a line break after themselves.
 
     Higher numbers are higher priority.
     """
 
 
 
 def is_split_before_delimiter(leaf: Leaf, previous: Leaf = None) -> int:
     """Return the priority of the `leaf` delimiter, given a line before after it.
 
     The delimiter priorities returned here are from those delimiters that would
     cause a line break before themselves.
 
     Higher numbers are higher priority.
     """
         # * and ** might also be MATH_OPERATORS but in this case they are not.
         # Don't treat them as a delimiter.
 
 
 
 
 
 
 
 
 
 def is_delimiter(leaf: Leaf, previous: Leaf = None) -> int:
     """Return the priority of the `leaf` delimiter. Return 0 if not delimiter.
 
     Higher numbers are higher priority.
     """
 
 
 def generate_comments(leaf: Leaf) -> Iterator[Leaf]:
     """Clean the prefix of the `leaf` and generate comments from it, if any.
 
     Comments in lib2to3 are shoved into the whitespace prefix.  This happens
     in `pgen2/driver.py:Driver.parse_tokens()`.  This was a brilliant implementation
     move because it does away with modifying the grammar to include all the
     possible places in which comments can be placed.
 
     The sad consequence for us though is that comments don't "belong" anywhere.
     This is why this function generates simple parentless Leaf objects for
     comments.  We simply don't know what the correct parent should be.
 
     No matter though, we can live without this.  We really only need to
     differentiate between inline and standalone comments.  The latter don't
     share the line with any code.
 
     Inline comments are emitted as regular token.COMMENT leaves.  Standalone
     are emitted with a fake STANDALONE_COMMENT token identifier.
     """
 
 
 
 
 
 
 
 
 
 def make_comment(content: str) -> str:
     """Return a consistently formatted comment from the given `content` string.
 
     All comments (except for "##", "#!", "#:") should have a single space between
     the hash sign and the content.
 
     If `content` didn't start with a hash sign, one is provided.
     """
 
 
 
 def split_line(
     line: Line, line_length: int, inner: bool = False, py36: bool = False
 ) -> Iterator[Line]:
     """Split a `line` into potentially many lines.
 
     They should fit in the allotted `line_length` but might not be able to.
     `inner` signifies that there were a pair of brackets somewhere around the
     current `line`, possibly transitively. This means we can fallback to splitting
     by delimiters if the LHS/RHS don't yield any results.
 
     If `py36` is True, splitting may generate syntax that is only compatible
     with Python 3.6 and later.
     """
 
 
         # We are accumulating lines in `result` because we might want to abort
         # mission and return the original line in the end, or attempt a different
         # split altogether.
 
 
 
 
 
 def left_hand_split(line: Line, py36: bool = False) -> Iterator[Line]:
     """Split line into many lines, starting with the first matching bracket pair.
 
     Note: this usually looks weird, only use this for function definitions.
     Prefer RHS otherwise.
     """
     # Since body is a new indent level, remove spurious leading whitespace.
     # Build the new lines.
 
 
 def right_hand_split(
     line: Line, py36: bool = False, omit: Collection[LeafID] = ()
 ) -> Iterator[Line]:
     """Split line into many lines, starting with the last matching bracket pair."""
     # Since body is a new indent level, remove spurious leading whitespace.
         # No `head` and no `body` means the split failed. `tail` has all content.
 
     # Build the new lines.
         # These parens were optional. If there aren't any delimiters or standalone
         # comments in the body, they were unnecessary and another split without
         # them should be attempted.
 
 
 
 def bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None:
     """Raise :exc:`CannotSplit` if the last left- or right-hand split failed.
 
     Do nothing otherwise.
 
     A left- or right-hand split is based on a pair of brackets. Content before
     (and including) the opening bracket is left on one line, content inside the
     brackets is put on a separate line, and finally content starting with and
     following the closing bracket is put on a separate line.
 
     Those are called `head`, `body`, and `tail`, respectively. If the split
     produced the same line (all content in `head`) or ended up with an empty `body`
     and the `tail` is just the closing bracket, then it's considered failed.
     """
 
 
 
 def dont_increase_indentation(split_func: SplitFunc) -> SplitFunc:
     """Normalize prefix of the first leaf in every line returned by `split_func`.
 
     This is a decorator over relevant split functions.
     """
 
     @wraps(split_func)
     def split_wrapper(line: Line, py36: bool = False) -> Iterator[Line]:
 
     return split_wrapper
 
 
 @dont_increase_indentation
 def delimiter_split(line: Line, py36: bool = False) -> Iterator[Line]:
     """Split according to delimiters of the highest priority.
 
     If `py36` is True, the split will add trailing commas also in function
     signatures that contain `*` and `**`.
     """
 
 
 
 
 
 
 
 
 
 
 @dont_increase_indentation
 def standalone_comment_split(line: Line, py36: bool = False) -> Iterator[Line]:
     """Split standalone comments from the rest of the line."""
 
 
 
 
 
 
 
 
 def is_import(leaf: Leaf) -> bool:
     """Return True if the given leaf starts an import statement."""
 
 
 def normalize_prefix(leaf: Leaf, *, inside_brackets: bool) -> None:
     """Leave existing extra newlines if not `inside_brackets`. Remove everything
     else.
 
     Note: don't use backslashes for formatting or you'll lose your voting rights.
     """
 
 
 
 def normalize_string_quotes(leaf: Leaf) -> None:
     """Prefer double quotes but only if it doesn't cause more escaping.
 
     Adds or removes backslashes as appropriate. Doesn't parse and fix
     strings nested in f-strings (yet).
 
     Note: Mutates its argument.
     """
 
 
             # There's at least one unescaped new_quote in this raw string
             # so converting is impossible
 
         # Do not introduce or remove backslashes in raw strings
         # Add escapes again for consecutive occurences of new_quote (sub
         # doesn't match overlapping substrings).
         # edge case:
 
 
 
 
 def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:
     """Make existing optional parentheses invisible or create new ones.
 
     Standardizes on visible parentheses for single-element tuples, and keeps
     existing visible parentheses for other tuples and generator expressions.
     """
                         # make parentheses invisible
                 # wrap child in visible parentheses
                 # wrap child in invisible parentheses
 
 
 
 def is_empty_tuple(node: LN) -> bool:
     """Return True if `node` holds an empty tuple."""
 
 
 def is_one_tuple(node: LN) -> bool:
     """Return True if `node` holds a tuple with one element, with or without parens."""
 
 
 
 
 
 def max_delimiter_priority_in_atom(node: LN) -> int:
 
 
 
 
 
 def ensure_visible(leaf: Leaf) -> None:
     """Make sure parentheses are visible.
 
     They could be invisible as part of some statements (see
     :func:`normalize_invible_parens` and :func:`visit_import_from`).
     """
 
 
 def is_python36(node: Node) -> bool:
     """Return True if the current file is using Python 3.6+ features.
 
     Currently looking for:
     - f-strings; and
     - trailing commas after * or ** in function signatures.
     """
 
 
 
 
 PYTHON_EXTENSIONS = {".py"}
 BLACKLISTED_DIRECTORIES = {
     "build", "buck-out", "dist", "_build", ".git", ".hg", ".mypy_cache", ".tox", ".venv"
 }
 
 
 def gen_python_files_in_dir(path: Path) -> Iterator[Path]:
     """Generate all files under `path` which aren't under BLACKLISTED_DIRECTORIES
     and have one of the PYTHON_EXTENSIONS.
     """
 
 
 
 
 @dataclass
 class Report:
     """Provides a reformatting counter. Can be rendered with `str(report)`."""
     check: bool = False
     quiet: bool = False
     change_count: int = 0
     same_count: int = 0
     failure_count: int = 0
 
     def done(self, src: Path, changed: bool) -> None:
         """Increment the counter for successful reformatting. Write out a message."""
 
     def failed(self, src: Path, message: str) -> None:
         """Increment the counter for failed reformatting. Write out a message."""
 
     @property
     def return_code(self) -> int:
         """Return the exit code that the app should use.
 
         This considers the current state of changed files and failures:
         - if there were any failures, return 123;
         - if any files were changed and --check is being used, return 1;
         - otherwise return 0.
         """
         # According to http://tldp.org/LDP/abs/html/exitcodes.html starting with
         # 126 we have special returncodes reserved by the shell.
 
 
 
     def __str__(self) -> str:
         """Render a color report of the current state.
 
         Use `click.unstyle` to remove colors.
         """
 
 
 def assert_equivalent(src: str, dst: str) -> None:
     """Raise AssertionError if `src` and `dst` aren't equivalent."""
 
 
 
 
 
 
 
 
 
 
 
 
 
 def assert_stable(src: str, dst: str, line_length: int) -> None:
     """Raise AssertionError if `dst` reformats differently the second time."""
 
 
 def dump_to_file(*output: str) -> str:
     """Dump `output` to a temporary file. Return path to the file."""
     import tempfile
 
     with tempfile.NamedTemporaryFile(
         mode="w", prefix="blk_", suffix=".log", delete=False
     ) as f:
         for lines in output:
             f.write(lines)
             if lines and lines[-1] != "\n":
     return f.name
 
 
 def diff(a: str, b: str, a_name: str, b_name: str) -> str:
     """Return a unified diff string between strings `a` and `b`."""
 
 
 
 def cancel(tasks: List[asyncio.Task]) -> None:
     """asyncio signal handler that cancels all `tasks` and reports to stderr."""
 
 
 def shutdown(loop: BaseEventLoop) -> None:
     """Cancel all pending tasks on `loop`, wait for them, and close the loop."""
         # This part is borrowed from asyncio/runners.py in Python 3.7b2.
 
         # `concurrent.futures.Future` objects cannot be cancelled once they
         # are already running. There might be some when the `shutdown()` happened.
         # Silence their logger's spew about the event loop being closed.
 
 
 if __name__ == "__main__":

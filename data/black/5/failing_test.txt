Expected tree:
file_input
  funcdef
    NAME "# The type annotation shouldn't get a trailing comma since that would change its type.\n# Relevant bug report: https://github.com/psf/black/issues/2381.\n" 'def'
    NAME ' ' 'some_function_with_a_really_long_name'
    parameters
      LPAR '('
      RPAR ')'
    /parameters
    RARROW ' ' '->'
    atom
      LPAR ' ' '('
      NAME '\n    ' 'returning_a_deeply_nested_import_of_a_type_i_suppose'
      RPAR '\n' ')'
    /atom
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT ''
      simple_stmt
        NAME '    ' 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  ENDMARKER ''
/file_input
Actual tree:
Cannot parse: 3:47: def some_function_with_a_really_long_name() -> 
======================================================================
FAIL: test_function_trailing_comma (tests.test_black.BlackTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/rowaha/.pyenv/versions/3.8.20/lib/python3.8/unittest/mock.py", line 1325, in patched
    return func(*newargs, **newkeywargs)
  File "/home/rowaha/work/llm-fl/BugsInPy/framework/bin/temp/black/tests/test_black.py", line 271, in test_function_trailing_comma
    self.assertFormatEqual(expected, actual)
  File "/home/rowaha/work/llm-fl/BugsInPy/framework/bin/temp/black/tests/test_black.py", line 159, in assertFormatEqual
    self.assertEqual(expected, actual)
AssertionError: "# Th[192 chars]) -> (\n    returning_a_deeply_nested_import_o[30 chars]ss\n" != "# Th[192 chars]) -> \n    returning_a_deeply_nested_import_of[28 chars]ss\n"
  # The type annotation shouldn't get a trailing comma since that would change its type.
  # Relevant bug report: https://github.com/psf/black/issues/2381.
- def some_function_with_a_really_long_name() -> (
?                                                -
+ def some_function_with_a_really_long_name() -> 
      returning_a_deeply_nested_import_of_a_type_i_suppose
- ):
? -
+ :
      pass


----------------------------------------------------------------------
Ran 1 test in 0.011s

FAILED (failures=1)

----- [ the following content was used for this test ] -----
1- # The type annotation shouldn't get a trailing comma since that would change its type.
2- # Relevant bug report: https://github.com/psf/black/issues/2381.
3- def some_function_with_a_really_long_name() -> (
4-    returning_a_deeply_nested_import_of_a_type_i_suppose
5- ):
6-    pass
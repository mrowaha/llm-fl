========================================================================================== FAILURES ==========================================================================================
_______________________________________________________________________ test_not_match[qweqwe-qweqwe: not found-None] ________________________________________________________________________

mocker = <pytest_mock.plugin.MockFixture object at 0x7c4e4b92f1f0>, script = 'qweqwe', stderr = 'qweqwe: not found', which = None

    @pytest.mark.usefixtures('no_memoize')
    @pytest.mark.parametrize('script, stderr, which', [
        ('qweqwe', 'qweqwe: not found', None),
        # ('vom file.py', 'some text', None),
        # ('vim file.py', 'vim: not found', 'vim')
    ])
    def test_not_match(mocker, script, stderr, which):
>       mocker.patch('thefuck.rules.no_command.which', return_value=which)

mocker     = <pytest_mock.plugin.MockFixture object at 0x7c4e4b92f1f0>
script     = 'qweqwe'
stderr     = 'qweqwe: not found'
which      = None

tests/rules/test_no_command.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/pytest_mock/plugin.py:199: in __call__
    return self._start_patch(self.mock_module.patch, *args, **kwargs)
env/lib/python3.8/site-packages/pytest_mock/plugin.py:163: in _start_patch
    mocked = p.start()
/home/rowaha/.pyenv/versions/3.8.20/lib/python3.8/unittest/mock.py:1529: in start
    result = self.__enter__()
/home/rowaha/.pyenv/versions/3.8.20/lib/python3.8/unittest/mock.py:1393: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7c4e4b824370>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'thefuck.rules.no_command' from '/home/rowaha/work/llm-fl/BugsInPy/framework/bin/temp/thefuck/thefuck/rules/no_command.py'> does not have the attribute 'which'

local      = False
name       = 'which'
original   = sentinel.DEFAULT
self       = <unittest.mock._patch object at 0x7c4e4b824370>
target     = <module 'thefuck.rules.no_command' from '/home/rowaha/work/llm-fl/BugsInPy/framework/bin/temp/thefuck/thefuck/rules/no_command.py'>

/home/rowaha/.pyenv/versions/3.8.20/lib/python3.8/unittest/mock.py:1366: AttributeError
================================================================================== 1 failed in 0.46 seconds ==================================================================================